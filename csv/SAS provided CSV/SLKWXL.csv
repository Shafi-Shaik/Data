_Key_,Owner,Sequence,Type,Subtype,Name,Continue,NValue,Encoded,Value
STAT,CMP,0.0,Header,Package,,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676901.837</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Package]]></S><N n=""Obfuscate"">0</N></L>"
F.STAT.VARP_SLK,CMP,0.0,Prototype,FCmp,stat,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[varp_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">144</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel VARP]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[data]]></S><S n=""Kind""><![CDATA[m]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[a]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">224</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N><L n=""ArraySpec""><S n=""Type""><![CDATA[n]]></S><N n=""Length"">0</N><N n=""NDim"">1</N><N n=""DimProd"">1</N><N n=""Dim1"">0</N><N n=""Dim2"">0</N></L></L></L></L>"
F.STAT.VARP_SLK,CMP,1.0,Header,Function,Excel VARP,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676901.844</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel VARP]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[stat]]></S></L>"
F.STAT.VARP_SLK,CMP,2.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function varp_slk( data[*] ) varargs label= ""Excel VARP"";"
F.STAT.VARP_SLK,CMP,3.0,Statement Source,Comment,CMT,0.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     varp_slk
  *
  * PURPOSE:   Microsoft Excel's VARP function.  Calculates variance
  *            based on the entire population.
  *
  * USAGE:     varp = varp_slk( x1, x2, ..., xn );
  *
  *--------------------------------------------------------------------*/"
F.STAT.VARP_SLK,CMP,4.0,Statement Source,Executable,ASSIGN,0.0,1.0,,len = dim( data );
F.STAT.VARP_SLK,CMP,5.0,Statement Source,Executable,ASSIGN,0.0,1.0,,xsq = 0;
F.STAT.VARP_SLK,CMP,6.0,Statement Source,Executable,ASSIGN,0.0,1.0,,x = 0;
F.STAT.VARP_SLK,CMP,7.0,Statement Source,Executable,DO,0.0,3.0,,do i=1 to len;
F.STAT.VARP_SLK,CMP,8.0,Statement Source,Executable,ASSIGN,0.0,1.0,,xsq += data[i]*data[i];
F.STAT.VARP_SLK,CMP,9.0,Statement Source,Executable,ASSIGN,0.0,1.0,,x += data[i];
F.STAT.VARP_SLK,CMP,10.0,Statement Source,Executable,END,0.0,10.0,,end;
F.STAT.VARP_SLK,CMP,11.0,Statement Source,Executable,ASSIGN,0.0,1.0,,varp = (len*xsq - x*x)/ len**2;
F.STAT.VARP_SLK,CMP,12.0,Statement Source,Executable,RETURN,0.0,1.0,,return( varp );
F.STAT.VARP_SLK,CMP,13.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.STAT.DEVSQ_SLK,CMP,14.0,Prototype,FCmp,stat,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[devsq_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">144</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel DEVSQ]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[data]]></S><S n=""Kind""><![CDATA[m]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[a]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">224</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N><L n=""ArraySpec""><S n=""Type""><![CDATA[n]]></S><N n=""Length"">0</N><N n=""NDim"">1</N><N n=""DimProd"">1</N><N n=""Dim1"">0</N><N n=""Dim2"">0</N></L></L></L></L>"
F.STAT.DEVSQ_SLK,CMP,15.0,Header,Function,Excel DEVSQ,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676901.845</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel DEVSQ]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[stat]]></S></L>"
F.STAT.DEVSQ_SLK,CMP,16.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function devsq_slk( data[*] ) varargs label= ""Excel DEVSQ"";"
F.STAT.DEVSQ_SLK,CMP,17.0,Statement Source,Comment,CMT,0.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     devsq_slk
  *
  * PURPOSE:   Microsoft Excel's DEVSQ function.  Returns the sum of
  *            deviations of data points from their sample mean.
  *
  * USAGE:     ds = devsq_slk( 4, 5, 6, 7, ... );
  *            ds = devsq_slk( arr );
  *
  *--------------------------------------------------------------------*/"
F.STAT.DEVSQ_SLK,CMP,18.0,Statement Source,Executable,ASSIGN,0.0,1.0,,datalen = dim( data );
F.STAT.DEVSQ_SLK,CMP,19.0,Statement Source,Executable,ASSIGN,0.0,1.0,,mean = 0;
F.STAT.DEVSQ_SLK,CMP,20.0,Statement Source,Executable,DO,0.0,3.0,,do i=1 to datalen;
F.STAT.DEVSQ_SLK,CMP,21.0,Statement Source,Executable,ASSIGN,0.0,1.0,,mean += data[i];
F.STAT.DEVSQ_SLK,CMP,22.0,Statement Source,Executable,END,0.0,10.0,,end;
F.STAT.DEVSQ_SLK,CMP,23.0,Statement Source,Executable,ASSIGN,0.0,1.0,,mean = mean/datalen;
F.STAT.DEVSQ_SLK,CMP,24.0,Statement Source,Executable,ASSIGN,0.0,1.0,,devsq = 0;
F.STAT.DEVSQ_SLK,CMP,25.0,Statement Source,Executable,DO,0.0,3.0,,do i = 1 to datalen;
F.STAT.DEVSQ_SLK,CMP,26.0,Statement Source,Executable,ASSIGN,0.0,1.0,,devsq += (data[i]-mean)**2;
F.STAT.DEVSQ_SLK,CMP,27.0,Statement Source,Executable,END,0.0,10.0,,end;
F.STAT.DEVSQ_SLK,CMP,28.0,Statement Source,Executable,RETURN,0.0,1.0,,return( devsq );
F.STAT.DEVSQ_SLK,CMP,29.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.STAT.AVEDEV_SLK,CMP,30.0,Prototype,FCmp,stat,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[avedev_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">144</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel AVEDEV]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[data]]></S><S n=""Kind""><![CDATA[m]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[a]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">224</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N><L n=""ArraySpec""><S n=""Type""><![CDATA[n]]></S><N n=""Length"">0</N><N n=""NDim"">1</N><N n=""DimProd"">1</N><N n=""Dim1"">0</N><N n=""Dim2"">0</N></L></L></L></L>"
F.STAT.AVEDEV_SLK,CMP,31.0,Header,Function,Excel AVEDEV,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676901.846</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel AVEDEV]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[stat]]></S></L>"
F.STAT.AVEDEV_SLK,CMP,32.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function avedev_slk( data[*] ) varargs label= ""Excel AVEDEV"";"
F.STAT.AVEDEV_SLK,CMP,33.0,Statement Source,Comment,CMT,0.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     avedev_slk
  *
  * PURPOSE:   Microsoft Excel's AVEDEV function.  Returns the average
  *            of the absolute deviations of data points from their mean.
  *
  * USAGE:     ad = avedev_slk( 4, 5, 6, 7, ... );
  *            ad = avedev_slk( arr );
  *
  *--------------------------------------------------------------------*/"
F.STAT.AVEDEV_SLK,CMP,34.0,Statement Source,Executable,ASSIGN,0.0,1.0,,datalen = dim( data );
F.STAT.AVEDEV_SLK,CMP,35.0,Statement Source,Executable,ASSIGN,0.0,1.0,,mean = 0;
F.STAT.AVEDEV_SLK,CMP,36.0,Statement Source,Executable,DO,0.0,3.0,,do i=1 to datalen;
F.STAT.AVEDEV_SLK,CMP,37.0,Statement Source,Executable,ASSIGN,0.0,1.0,,mean += data[i];
F.STAT.AVEDEV_SLK,CMP,38.0,Statement Source,Executable,END,0.0,10.0,,end;
F.STAT.AVEDEV_SLK,CMP,39.0,Statement Source,Executable,ASSIGN,0.0,1.0,,mean = mean/datalen;
F.STAT.AVEDEV_SLK,CMP,40.0,Statement Source,Executable,ASSIGN,0.0,1.0,,avedev = 0;
F.STAT.AVEDEV_SLK,CMP,41.0,Statement Source,Executable,DO,0.0,3.0,,do i = 1 to datalen;
F.STAT.AVEDEV_SLK,CMP,42.0,Statement Source,Executable,ASSIGN,0.0,1.0,,avedev += abs(data[i]-mean);
F.STAT.AVEDEV_SLK,CMP,43.0,Statement Source,Executable,END,0.0,10.0,,end;
F.STAT.AVEDEV_SLK,CMP,44.0,Statement Source,Executable,ASSIGN,0.0,1.0,,avedev = avedev/datalen;
F.STAT.AVEDEV_SLK,CMP,45.0,Statement Source,Executable,RETURN,0.0,1.0,,return( avedev );
F.STAT.AVEDEV_SLK,CMP,46.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
FINANCE,CMP,0.0,Header,Package,,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.357</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Package]]></S><N n=""Obfuscate"">0</N></L>"
F.FINANCE.MDURATION_SLK,CMP,0.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[mduration_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel MDURATION]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">0</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">0</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[coupon]]></S><S n=""Kind""><![CDATA[v]]></S"
F.FINANCE.MDURATION_SLK,CMP,1.0,Prototype,FCmp,finance,1.0,,,"><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">0</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[yld]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S"
F.FINANCE.MDURATION_SLK,CMP,2.0,Prototype,FCmp,finance,2.0,,,"n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">0</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.MDURATION_SLK,CMP,3.0,Header,Function,Excel MDURATION,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                   1726676902.36</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel MDURATION]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.MDURATION_SLK,CMP,4.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function mduration_slk(settlement,maturity,coupon,yld,freq,basis) label= ""Excel MDURATION"";"
F.FINANCE.MDURATION_SLK,CMP,5.0,Statement Source,Comment,CMT,1.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     mduration_slk
  *
  * PURPOSE:   Microsoft Excel's MDURATION function.  Returns the
  *            modified duration for a security with an assumed
  *            par value of $100.
  *
  * USAGE:     f = mduration_slk(settlement,maturity,coupon,
  *                              yld,freq,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               maturity - The security's maturity date. The
  *                   maturity is the date when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               coupon - the security's annual coupon rate.
  *               yld - the security's annual yield.
  *               freq - Number of co"
F.FINANCE.MDURATION_SLK,CMP,6.0,Statement Source,Comment,CMT,2.0,101.0,,"upon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *                   freq = 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *-----------------------------------------------------------------*/"
F.FINANCE.MDURATION_SLK,CMP,7.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"dur = duration_slk(settlement,maturity,coupon,yld,freq,basis);"
F.FINANCE.MDURATION_SLK,CMP,8.0,Statement Source,Executable,IF,0.0,2.0,,if dur eq . then
F.FINANCE.MDURATION_SLK,CMP,9.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.MDURATION_SLK,CMP,10.0,Statement Source,Executable,ASSIGN,0.0,1.0,,mdur = dur/(1+yld/freq);
F.FINANCE.MDURATION_SLK,CMP,11.0,Statement Source,Executable,RETURN,0.0,1.0,,return(mdur);
F.FINANCE.MDURATION_SLK,CMP,12.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.DURATION_SLK,CMP,13.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[duration_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel DURATION]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[coupon]]></S><S n=""Kind""><![CDATA[v]]></S"
F.FINANCE.DURATION_SLK,CMP,14.0,Prototype,FCmp,finance,1.0,,,"><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[yld]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><"
F.FINANCE.DURATION_SLK,CMP,15.0,Prototype,FCmp,finance,2.0,,,"S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.DURATION_SLK,CMP,16.0,Header,Function,Excel DURATION,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.361</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel DURATION]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.DURATION_SLK,CMP,17.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function duration_slk(settlement,maturity,coupon,yld,freq,basis) label= ""Excel DURATION"";"
F.FINANCE.DURATION_SLK,CMP,18.0,Statement Source,Comment,CMT,1.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     duration_slk
  *
  * PURPOSE:   Microsoft Excel's DURATION function.  Returns the
  *            Macauley duration for an assumed par value of $100.
  *
  * USAGE:     f = duration_slk(settlement,maturity,coupon,
  *                             yld,freq,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               maturity - The security's maturity date. The
  *                   maturity is the date when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               coupon - the security's annual coupon rate.
  *               yld - the security's annual yield.
  *               freq - Number of coupon payments per year.
  *"
F.FINANCE.DURATION_SLK,CMP,19.0,Statement Source,Comment,CMT,2.0,101.0,,"freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *                   freq = 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *-----------------------------------------------------------------*/"
F.FINANCE.DURATION_SLK,CMP,20.0,Statement Source,Executable,IF,0.0,2.0,,if coupon < 0 | yld < 0 then
F.FINANCE.DURATION_SLK,CMP,21.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.DURATION_SLK,CMP,22.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.DURATION_SLK,CMP,23.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.DURATION_SLK,CMP,24.0,Statement Source,Executable,IF,0.0,2.0,,if settlement >= maturity then
F.FINANCE.DURATION_SLK,CMP,25.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.DURATION_SLK,CMP,26.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"n = coupnum_slk(settlement,maturity,freq,basis);"
F.FINANCE.DURATION_SLK,CMP,27.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"E = coupdays_slk(settlement,maturity,freq,basis);"
F.FINANCE.DURATION_SLK,CMP,28.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = coupdaysnc_slk(settlement,maturity,freq,basis);"
F.FINANCE.DURATION_SLK,CMP,29.0,Statement Source,Executable,ASSIGN,0.0,1.0,,par = 100;
F.FINANCE.DURATION_SLK,CMP,30.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cashfl = par*coupon/freq;
F.FINANCE.DURATION_SLK,CMP,31.0,Statement Source,Executable,ASSIGN,0.0,1.0,,pyield = yld/freq;
F.FINANCE.DURATION_SLK,CMP,32.0,Statement Source,Executable,ASSIGN,0.0,1.0,,price = 0;
F.FINANCE.DURATION_SLK,CMP,33.0,Statement Source,Executable,ASSIGN,0.0,1.0,,pricei = 0;
F.FINANCE.DURATION_SLK,CMP,34.0,Statement Source,Executable,DO,0.0,3.0,,do i = 1 to n;
F.FINANCE.DURATION_SLK,CMP,35.0,Statement Source,Executable,ASSIGN,0.0,1.0,,pv = cashfl/(1 + pyield)**(i-1+DSC/E);
F.FINANCE.DURATION_SLK,CMP,36.0,Statement Source,Executable,ASSIGN,0.0,1.0,,pvi = pv*(i-1+DSC/E);
F.FINANCE.DURATION_SLK,CMP,37.0,Statement Source,Executable,ASSIGN,0.0,1.0,,price = price + pv;
F.FINANCE.DURATION_SLK,CMP,38.0,Statement Source,Executable,ASSIGN,0.0,1.0,,pricei = pricei + pvi;
F.FINANCE.DURATION_SLK,CMP,39.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.DURATION_SLK,CMP,40.0,Statement Source,Executable,ASSIGN,0.0,1.0,,pricei = pricei+100*(n-1+DSC/E)/(1+pyield)**(n-1+DSC/E);
F.FINANCE.DURATION_SLK,CMP,41.0,Statement Source,Executable,ASSIGN,0.0,1.0,,price = price + 100/(1+pyield)**(n-1+DSC/E);
F.FINANCE.DURATION_SLK,CMP,42.0,Statement Source,Executable,ASSIGN,0.0,1.0,,duration = pricei/(freq*price);
F.FINANCE.DURATION_SLK,CMP,43.0,Statement Source,Executable,RETURN,0.0,1.0,,return(duration);
F.FINANCE.DURATION_SLK,CMP,44.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.ACCRINTM_SLK,CMP,45.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[accrintm_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel ACCRINTM]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[issue]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n="""
F.FINANCE.ACCRINTM_SLK,CMP,46.0,Prototype,FCmp,finance,2.0,,,"Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[par]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.ACCRINTM_SLK,CMP,47.0,Header,Function,Excel ACCRINTM,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.362</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel ACCRINTM]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.ACCRINTM_SLK,CMP,48.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function accrintm_slk(issue, maturity, rate, par, basis) label= ""Excel ACCRINTM"";"
F.FINANCE.ACCRINTM_SLK,CMP,49.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     accrintm_slk
  *
  * PURPOSE:   Microsoft Excel's ACCRINTM function. Returns accrued
  *            interest for a security that pays interest at maturity.
  *
  * USAGE:     accrintm = accrintm_slk(issue,maturity,rate,par,basis);
  *               issue - the security's issue date.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               maturity - maturity date, expressed as SAS date
  *                   value, e.g., '10jun98'd.
  *               rate - the security's annual coupon rate,
  *               par - the security's par value.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *----------"
F.FINANCE.ACCRINTM_SLK,CMP,50.0,Statement Source,Comment,CMT,2.0,101.0,,----------------------------------------------------------*/
F.FINANCE.ACCRINTM_SLK,CMP,51.0,Statement Source,Executable,IF,0.0,2.0,,if par <= 0 | rate <= 0 | basis < 0 | basis > 4 | issue >= maturity then
F.FINANCE.ACCRINTM_SLK,CMP,52.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ACCRINTM_SLK,CMP,53.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.ACCRINTM_SLK,CMP,54.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.ACCRINTM_SLK,CMP,55.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ACCRINTM_SLK,CMP,56.0,Statement Source,Executable,ASSIGN,0.0,1.0,,D = 360;
F.FINANCE.ACCRINTM_SLK,CMP,57.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,maturity,'30/360');"
F.FINANCE.ACCRINTM_SLK,CMP,58.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ACCRINTM_SLK,CMP,59.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.ACCRINTM_SLK,CMP,60.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ACCRINTM_SLK,CMP,61.0,Statement Source,Executable,ASSIGN,0.0,1.0,,maty = year(maturity);
F.FINANCE.ACCRINTM_SLK,CMP,62.0,Statement Source,Executable,ASSIGN,0.0,1.0,,matm = month(maturity);
F.FINANCE.ACCRINTM_SLK,CMP,63.0,Statement Source,Executable,ASSIGN,0.0,1.0,,matd = day(maturity);
F.FINANCE.ACCRINTM_SLK,CMP,64.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"priorday = mdy(matm,matd,maty-1);"
F.FINANCE.ACCRINTM_SLK,CMP,65.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"D = datdif(priorday, maturity,'act/act');"
F.FINANCE.ACCRINTM_SLK,CMP,66.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,maturity,'act/act');"
F.FINANCE.ACCRINTM_SLK,CMP,67.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ACCRINTM_SLK,CMP,68.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.ACCRINTM_SLK,CMP,69.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ACCRINTM_SLK,CMP,70.0,Statement Source,Executable,ASSIGN,0.0,1.0,,D = 360;
F.FINANCE.ACCRINTM_SLK,CMP,71.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,maturity,'act/360');"
F.FINANCE.ACCRINTM_SLK,CMP,72.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ACCRINTM_SLK,CMP,73.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.ACCRINTM_SLK,CMP,74.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ACCRINTM_SLK,CMP,75.0,Statement Source,Executable,ASSIGN,0.0,1.0,,D = 365;
F.FINANCE.ACCRINTM_SLK,CMP,76.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,maturity,'act/365');"
F.FINANCE.ACCRINTM_SLK,CMP,77.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ACCRINTM_SLK,CMP,78.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.ACCRINTM_SLK,CMP,79.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ACCRINTM_SLK,CMP,80.0,Statement Source,Executable,ASSIGN,0.0,1.0,,D = 360;
F.FINANCE.ACCRINTM_SLK,CMP,81.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif4_slk(issue,maturity);"
F.FINANCE.ACCRINTM_SLK,CMP,82.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ACCRINTM_SLK,CMP,83.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.ACCRINTM_SLK,CMP,84.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.ACCRINTM_SLK,CMP,85.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ACCRINTM_SLK,CMP,86.0,Statement Source,Executable,ASSIGN,0.0,1.0,,accrintm = par*rate*A/D;
F.FINANCE.ACCRINTM_SLK,CMP,87.0,Statement Source,Executable,RETURN,0.0,1.0,,return(accrintm);
F.FINANCE.ACCRINTM_SLK,CMP,88.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.ACCRINT_SLK,CMP,89.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[accrint_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel ACCRINT]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[issue]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[finterest]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S"
F.FINANCE.ACCRINT_SLK,CMP,90.0,Prototype,FCmp,finance,1.0,,,"n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[par]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S n"
F.FINANCE.ACCRINT_SLK,CMP,91.0,Prototype,FCmp,finance,2.0,,,"=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.ACCRINT_SLK,CMP,92.0,Header,Function,Excel ACCRINT,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.364</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel ACCRINT]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.ACCRINT_SLK,CMP,93.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function accrint_slk(issue,finterest,settlement,rate,par,freq,basis) label= ""Excel ACCRINT"";"
F.FINANCE.ACCRINT_SLK,CMP,94.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     accrint_slk
  *
  * PURPOSE:   Microsoft Excel's ACCRINT function. Returns accrued
  *            interest for a security that pays periodic interest.
  *
  * USAGE:     accrint = accrint_slk(issue,finterest,settlement,
  *                                  rate,par,freq,basis);
  *               issue - the security's issue date.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               finterest - the security's first interest date.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               rate - the security's annual coupon rate.
  *               par - the security's par value, if ommi"
F.FINANCE.ACCRINT_SLK,CMP,95.0,Statement Source,Comment,CMT,2.0,101.0,,"tted $1000
  *                   is used.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *                   freq = 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *--------------------------------------------------------------------*/"
F.FINANCE.ACCRINT_SLK,CMP,96.0,Statement Source,Executable,IF,0.0,2.0,,if par <= 0 | rate <= 0 | basis < 0 | basis > 4 | issue >= settlement then
F.FINANCE.ACCRINT_SLK,CMP,97.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ACCRINT_SLK,CMP,98.0,Statement Source,Comment,CMT,0.0,101.0,,/*- create a fake maturity date -*/
F.FINANCE.ACCRINT_SLK,CMP,99.0,Statement Source,Executable,ASSIGN,0.0,1.0,,fmatyear = year(settlement) + 1;
F.FINANCE.ACCRINT_SLK,CMP,100.0,Statement Source,Executable,ASSIGN,0.0,1.0,,fmatmonth = month(finterest);
F.FINANCE.ACCRINT_SLK,CMP,101.0,Statement Source,Executable,ASSIGN,0.0,1.0,,fmatday = day(finterest);
F.FINANCE.ACCRINT_SLK,CMP,102.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"fmaturity = mdy(fmatmonth, fmatday, fmatyear);"
F.FINANCE.ACCRINT_SLK,CMP,103.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"ncd = coupncd_slk(issue, fmaturity, freq, basis);"
F.FINANCE.ACCRINT_SLK,CMP,104.0,Statement Source,Executable,IF,0.0,2.0,,if settlement > ncd then
F.FINANCE.ACCRINT_SLK,CMP,105.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ACCRINT_SLK,CMP,106.0,Statement Source,Comment,CMT,0.0,101.0,,"/*- calculate number of days involved in the quasi-coupon
            period that contains the settlement date -*/"
F.FINANCE.ACCRINT_SLK,CMP,107.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"pdays = coupdaybs_slk(settlement, fmaturity, freq, basis);"
F.FINANCE.ACCRINT_SLK,CMP,108.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"pNL = coupdays_slk(settlement, fmaturity, freq, basis);"
F.FINANCE.ACCRINT_SLK,CMP,109.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"n = coupnum_slk(issue, settlement, freq, basis) - 1;"
F.FINANCE.ACCRINT_SLK,CMP,110.0,Statement Source,Executable,IF,0.0,2.0,,if ncd = issue then
F.FINANCE.ACCRINT_SLK,CMP,111.0,Statement Source,Executable,ASSIGN,0.0,1.0,,bdays = 0;
F.FINANCE.ACCRINT_SLK,CMP,112.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.ACCRINT_SLK,CMP,113.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"bdays = coupdaysnc_slk(issue, fmaturity, freq, basis);"
F.FINANCE.ACCRINT_SLK,CMP,114.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"bNL = coupdays_slk(issue, fmaturity, freq, basis);"
F.FINANCE.ACCRINT_SLK,CMP,115.0,Statement Source,Executable,ASSIGN,0.0,1.0,,sumd = n + bdays/bNL + pdays/pNL;
F.FINANCE.ACCRINT_SLK,CMP,116.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ACCRINT_SLK,CMP,117.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.ACCRINT_SLK,CMP,118.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ACCRINT_SLK,CMP,119.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"NL = coupdays_slk(settlement,fmaturity, freq, basis);"
F.FINANCE.ACCRINT_SLK,CMP,120.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.ACCRINT_SLK,CMP,121.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.ACCRINT_SLK,CMP,122.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,settlement,'30/360');"
F.FINANCE.ACCRINT_SLK,CMP,123.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.ACCRINT_SLK,CMP,124.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,settlement,'act/act');"
F.FINANCE.ACCRINT_SLK,CMP,125.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.ACCRINT_SLK,CMP,126.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,settlement,'act/360');"
F.FINANCE.ACCRINT_SLK,CMP,127.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.ACCRINT_SLK,CMP,128.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,settlement,'act/365');"
F.FINANCE.ACCRINT_SLK,CMP,129.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.ACCRINT_SLK,CMP,130.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif4_slk(issue,settlement);"
F.FINANCE.ACCRINT_SLK,CMP,131.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.ACCRINT_SLK,CMP,132.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ACCRINT_SLK,CMP,133.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ACCRINT_SLK,CMP,134.0,Statement Source,Executable,ASSIGN,0.0,1.0,,sumd = A/NL;
F.FINANCE.ACCRINT_SLK,CMP,135.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ACCRINT_SLK,CMP,136.0,Statement Source,Executable,ASSIGN,0.0,1.0,,accrint = par*rate/freq*sumd;
F.FINANCE.ACCRINT_SLK,CMP,137.0,Statement Source,Executable,RETURN,0.0,1.0,,return(accrint);
F.FINANCE.ACCRINT_SLK,CMP,138.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.RECEIVED_SLK,CMP,139.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[received_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel RECEIVED]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[investment]]></S><S n=""Kind""><![CDATA[v]]"
F.FINANCE.RECEIVED_SLK,CMP,140.0,Prototype,FCmp,finance,2.0,,,"></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[discount]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.RECEIVED_SLK,CMP,141.0,Header,Function,Excel RECEIVED,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.366</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel RECEIVED]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.RECEIVED_SLK,CMP,142.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function received_slk(settlement,maturity,investment,discount,basis) label= ""Excel RECEIVED"";"
F.FINANCE.RECEIVED_SLK,CMP,143.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     received_slk
  *
  * PURPOSE:   Microsoft Excel's RECEIVED function. Returns the amount
   *            received at maturity for a fully invested security
  *
  * USAGE:     received = received_slk(settlement,maturity,investment,
   *                                    discount,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               investment - the amount invested in the security.
  *               discount - the security's discount rate.
  *               basis - type of"
F.FINANCE.RECEIVED_SLK,CMP,144.0,Statement Source,Comment,CMT,2.0,101.0,,"day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *--------------------------------------------------------------------*/"
F.FINANCE.RECEIVED_SLK,CMP,145.0,Statement Source,Executable,IF,0.0,2.0,,if investment <= 0 | discount <= 0 then
F.FINANCE.RECEIVED_SLK,CMP,146.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.RECEIVED_SLK,CMP,147.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 | settlement >= maturity then
F.FINANCE.RECEIVED_SLK,CMP,148.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.RECEIVED_SLK,CMP,149.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.RECEIVED_SLK,CMP,150.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.RECEIVED_SLK,CMP,151.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.RECEIVED_SLK,CMP,152.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.RECEIVED_SLK,CMP,153.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DIM = datdif(settlement,maturity,'30/360');"
F.FINANCE.RECEIVED_SLK,CMP,154.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.RECEIVED_SLK,CMP,155.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.RECEIVED_SLK,CMP,156.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.RECEIVED_SLK,CMP,157.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"newyeard = intnx('year', maturity - 1, 0);"
F.FINANCE.RECEIVED_SLK,CMP,158.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"endyeard = intnx('year', maturity - 1, 1) - 1;"
F.FINANCE.RECEIVED_SLK,CMP,159.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = endyeard - newyeard + 1;
F.FINANCE.RECEIVED_SLK,CMP,160.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DIM = datdif(settlement,maturity,'act/act');"
F.FINANCE.RECEIVED_SLK,CMP,161.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.RECEIVED_SLK,CMP,162.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.RECEIVED_SLK,CMP,163.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.RECEIVED_SLK,CMP,164.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.RECEIVED_SLK,CMP,165.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DIM = datdif(settlement,maturity,'act/360');"
F.FINANCE.RECEIVED_SLK,CMP,166.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.RECEIVED_SLK,CMP,167.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.RECEIVED_SLK,CMP,168.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.RECEIVED_SLK,CMP,169.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 365;
F.FINANCE.RECEIVED_SLK,CMP,170.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DIM = datdif(settlement,maturity,'act/365');"
F.FINANCE.RECEIVED_SLK,CMP,171.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.RECEIVED_SLK,CMP,172.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.RECEIVED_SLK,CMP,173.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.RECEIVED_SLK,CMP,174.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.RECEIVED_SLK,CMP,175.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DIM = datdif4_slk(settlement,maturity);"
F.FINANCE.RECEIVED_SLK,CMP,176.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.RECEIVED_SLK,CMP,177.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.RECEIVED_SLK,CMP,178.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.RECEIVED_SLK,CMP,179.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.RECEIVED_SLK,CMP,180.0,Statement Source,Executable,ASSIGN,0.0,1.0,,receive = investment/(1 - (discount*DIM/B));
F.FINANCE.RECEIVED_SLK,CMP,181.0,Statement Source,Executable,RETURN,0.0,1.0,,return(receive);
F.FINANCE.RECEIVED_SLK,CMP,182.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.YIELDMAT_SLK,CMP,183.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[yieldmat_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel YIELDMAT]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[issue]]></S><S n=""Kind""><![CDATA[v]]></S>"
F.FINANCE.YIELDMAT_SLK,CMP,184.0,Prototype,FCmp,finance,1.0,,,"<S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">0</N><N n=""Flag1"">128</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[pr]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S"
F.FINANCE.YIELDMAT_SLK,CMP,185.0,Prototype,FCmp,finance,2.0,,,"n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.YIELDMAT_SLK,CMP,186.0,Header,Function,Excel YIELDMAT,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.368</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel YIELDMAT]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.YIELDMAT_SLK,CMP,187.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function yieldmat_slk(settlement,maturity,issue,rate,pr,basis) label= ""Excel YIELDMAT"";"
F.FINANCE.YIELDMAT_SLK,CMP,188.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     yieldmat_slk
  *
  * PURPOSE:   Microsoft Excel's YIELDMAT function. Returns the annual
  *            yield of a security that pays interest at maturity.
  *
  * USAGE:     ymat = yieldmat_slk(settlement,maturity,issue,rate,pr,
  *                                basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               issue - security's issue date.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               rate - security's annual coupon rate.
  *"
F.FINANCE.YIELDMAT_SLK,CMP,189.0,Statement Source,Comment,CMT,2.0,101.0,,"basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *               pr - the security's price per $100 face value,
  *                    price must be >0.
  *--------------------------------------------------------------------*/"
F.FINANCE.YIELDMAT_SLK,CMP,190.0,Statement Source,Executable,IF,0.0,2.0,,if rate < 0 | pr <= 0 then
F.FINANCE.YIELDMAT_SLK,CMP,191.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.YIELDMAT_SLK,CMP,192.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.YIELDMAT_SLK,CMP,193.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.YIELDMAT_SLK,CMP,194.0,Statement Source,Executable,IF,0.0,2.0,,if settlement >= maturity then
F.FINANCE.YIELDMAT_SLK,CMP,195.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.YIELDMAT_SLK,CMP,196.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"yieldmat = solve(""pricemat_slk"",{.},pr,settlement,maturity, issue,rate, ., basis);"
F.FINANCE.YIELDMAT_SLK,CMP,197.0,Statement Source,Executable,RETURN,0.0,1.0,,return(yieldmat);
F.FINANCE.YIELDMAT_SLK,CMP,198.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.PRICEMAT_SLK,CMP,199.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[pricemat_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel PRICE]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[issue]]></S><S n=""Kind""><![CDATA[v]]></S><S"
F.FINANCE.PRICEMAT_SLK,CMP,200.0,Prototype,FCmp,finance,1.0,,,"n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[yld]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n="
F.FINANCE.PRICEMAT_SLK,CMP,201.0,Prototype,FCmp,finance,2.0,,,"""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.PRICEMAT_SLK,CMP,202.0,Header,Function,Excel PRICE,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.369</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel PRICE]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.PRICEMAT_SLK,CMP,203.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function pricemat_slk(settlement,maturity,issue,rate,yld,basis) label= ""Excel PRICE"";"
F.FINANCE.PRICEMAT_SLK,CMP,204.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     pricemat_slk
  *
  * PURPOSE:   Microsoft Excel's PRICEMAT function. Returns the price
  *            per $100 face value of a security that pays interest at
   *            maturity.
  *
  * USAGE:     pricemat = pricemat_slk(settlement,maturity,issue,
   *                                    rate,yld,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               issue - the security's issue date.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               rat"
F.FINANCE.PRICEMAT_SLK,CMP,205.0,Statement Source,Comment,CMT,2.0,101.0,,"e - the security's annual coupon rate.
  *               yld - the security's annual yield.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *--------------------------------------------------------------------*/"
F.FINANCE.PRICEMAT_SLK,CMP,206.0,Statement Source,Executable,IF,0.0,2.0,,if rate < 0 | yld < 0 then
F.FINANCE.PRICEMAT_SLK,CMP,207.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.PRICEMAT_SLK,CMP,208.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 | settlement >= maturity then
F.FINANCE.PRICEMAT_SLK,CMP,209.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.PRICEMAT_SLK,CMP,210.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.PRICEMAT_SLK,CMP,211.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.PRICEMAT_SLK,CMP,212.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.PRICEMAT_SLK,CMP,213.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.PRICEMAT_SLK,CMP,214.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'30/360');"
F.FINANCE.PRICEMAT_SLK,CMP,215.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DIM = datdif(issue, maturity, '30/360');"
F.FINANCE.PRICEMAT_SLK,CMP,216.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue, settlement, '30/360');"
F.FINANCE.PRICEMAT_SLK,CMP,217.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEMAT_SLK,CMP,218.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.PRICEMAT_SLK,CMP,219.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.PRICEMAT_SLK,CMP,220.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"newyeard = intnx('year', maturity - 1, 0);"
F.FINANCE.PRICEMAT_SLK,CMP,221.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"endyeard = intnx('year', maturity - 1, 1) - 1;"
F.FINANCE.PRICEMAT_SLK,CMP,222.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = endyeard - newyeard + 1;
F.FINANCE.PRICEMAT_SLK,CMP,223.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/act');"
F.FINANCE.PRICEMAT_SLK,CMP,224.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DIM = datdif(issue, maturity, 'act/act');"
F.FINANCE.PRICEMAT_SLK,CMP,225.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue, settlement, 'act/act');"
F.FINANCE.PRICEMAT_SLK,CMP,226.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEMAT_SLK,CMP,227.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.PRICEMAT_SLK,CMP,228.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.PRICEMAT_SLK,CMP,229.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.PRICEMAT_SLK,CMP,230.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/360');"
F.FINANCE.PRICEMAT_SLK,CMP,231.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DIM = datdif(issue, maturity, 'act/360');"
F.FINANCE.PRICEMAT_SLK,CMP,232.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue, settlement, 'act/360');"
F.FINANCE.PRICEMAT_SLK,CMP,233.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEMAT_SLK,CMP,234.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.PRICEMAT_SLK,CMP,235.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.PRICEMAT_SLK,CMP,236.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 365;
F.FINANCE.PRICEMAT_SLK,CMP,237.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/365');"
F.FINANCE.PRICEMAT_SLK,CMP,238.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DIM = datdif(issue, maturity, 'act/365');"
F.FINANCE.PRICEMAT_SLK,CMP,239.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue, settlement, 'act/365');"
F.FINANCE.PRICEMAT_SLK,CMP,240.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEMAT_SLK,CMP,241.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.PRICEMAT_SLK,CMP,242.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.PRICEMAT_SLK,CMP,243.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.PRICEMAT_SLK,CMP,244.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif4_slk(settlement,maturity);"
F.FINANCE.PRICEMAT_SLK,CMP,245.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DIM = datdif4_slk(issue, maturity);"
F.FINANCE.PRICEMAT_SLK,CMP,246.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif4_slk(issue, settlement);"
F.FINANCE.PRICEMAT_SLK,CMP,247.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEMAT_SLK,CMP,248.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.PRICEMAT_SLK,CMP,249.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.PRICEMAT_SLK,CMP,250.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEMAT_SLK,CMP,251.0,Statement Source,Executable,ASSIGN,0.0,1.0,,pricemat = (100 + (DIM/B*rate*100))/ (1 + (DSM/B*yld)) - (A/B*rate*100);
F.FINANCE.PRICEMAT_SLK,CMP,252.0,Statement Source,Executable,RETURN,0.0,1.0,,return(pricemat);
F.FINANCE.PRICEMAT_SLK,CMP,253.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.PRICEDISC_SLK,CMP,254.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[pricedisc_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel PRICEDSIC]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[discount]]></S><S n=""Kind""><![CDATA[v]]"
F.FINANCE.PRICEDISC_SLK,CMP,255.0,Prototype,FCmp,finance,2.0,,,"></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[redemp]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.PRICEDISC_SLK,CMP,256.0,Header,Function,Excel PRICEDSIC,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                   1726676902.37</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel PRICEDSIC]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.PRICEDISC_SLK,CMP,257.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function pricedisc_slk(settlement,maturity,discount,redemp,basis) label= ""Excel PRICEDSIC"";"
F.FINANCE.PRICEDISC_SLK,CMP,258.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     pricedisc_slk
  *
  * PURPOSE:   Microsoft Excel's PRICEDISC function. Returns the price
   *             per $100 face value on a discounted security.
  *
  * USAGE:     price = price_slk(settlement,maturity,discount,
  *                              redemp,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               discount - the security's discount rate.
  *               redemp - the security's redemption value per
  *                   $100 face value.
  *               ba"
F.FINANCE.PRICEDISC_SLK,CMP,259.0,Statement Source,Comment,CMT,2.0,101.0,,"sis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *--------------------------------------------------------------------*/"
F.FINANCE.PRICEDISC_SLK,CMP,260.0,Statement Source,Executable,IF,0.0,2.0,,if redemp <= 0 | discount <= 0 then
F.FINANCE.PRICEDISC_SLK,CMP,261.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.PRICEDISC_SLK,CMP,262.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.PRICEDISC_SLK,CMP,263.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.PRICEDISC_SLK,CMP,264.0,Statement Source,Executable,IF,0.0,2.0,,if settlement >= maturity then
F.FINANCE.PRICEDISC_SLK,CMP,265.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.PRICEDISC_SLK,CMP,266.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.PRICEDISC_SLK,CMP,267.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.PRICEDISC_SLK,CMP,268.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.PRICEDISC_SLK,CMP,269.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.PRICEDISC_SLK,CMP,270.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'30/360');"
F.FINANCE.PRICEDISC_SLK,CMP,271.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEDISC_SLK,CMP,272.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.PRICEDISC_SLK,CMP,273.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.PRICEDISC_SLK,CMP,274.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"newyeard = intnx('year', maturity - 1, 0);"
F.FINANCE.PRICEDISC_SLK,CMP,275.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"endyeard = intnx('year', maturity - 1, 1) - 1;"
F.FINANCE.PRICEDISC_SLK,CMP,276.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = endyeard - newyeard + 1;
F.FINANCE.PRICEDISC_SLK,CMP,277.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/act');"
F.FINANCE.PRICEDISC_SLK,CMP,278.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEDISC_SLK,CMP,279.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.PRICEDISC_SLK,CMP,280.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.PRICEDISC_SLK,CMP,281.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.PRICEDISC_SLK,CMP,282.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/360');"
F.FINANCE.PRICEDISC_SLK,CMP,283.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEDISC_SLK,CMP,284.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.PRICEDISC_SLK,CMP,285.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.PRICEDISC_SLK,CMP,286.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 365;
F.FINANCE.PRICEDISC_SLK,CMP,287.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/365');"
F.FINANCE.PRICEDISC_SLK,CMP,288.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEDISC_SLK,CMP,289.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.PRICEDISC_SLK,CMP,290.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.PRICEDISC_SLK,CMP,291.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.PRICEDISC_SLK,CMP,292.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif4_slk(settlement,maturity);"
F.FINANCE.PRICEDISC_SLK,CMP,293.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEDISC_SLK,CMP,294.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.PRICEDISC_SLK,CMP,295.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.PRICEDISC_SLK,CMP,296.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICEDISC_SLK,CMP,297.0,Statement Source,Executable,ASSIGN,0.0,1.0,,pricedisc = redemp - discount*redemp*DSM/B;
F.FINANCE.PRICEDISC_SLK,CMP,298.0,Statement Source,Executable,RETURN,0.0,1.0,,return(pricedisc);
F.FINANCE.PRICEDISC_SLK,CMP,299.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.PRICE_SLK,CMP,300.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[price_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel PRICE]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""T"
F.FINANCE.PRICE_SLK,CMP,301.0,Prototype,FCmp,finance,1.0,,,"ype""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[yield]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[redemp]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S n="
F.FINANCE.PRICE_SLK,CMP,302.0,Prototype,FCmp,finance,2.0,,,"""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.PRICE_SLK,CMP,303.0,Header,Function,Excel PRICE,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.372</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel PRICE]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.PRICE_SLK,CMP,304.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function price_slk(settlement,maturity,rate,yield,redemp,freq,basis) label= ""Excel PRICE"";"
F.FINANCE.PRICE_SLK,CMP,305.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     price_slk
  *
  * PURPOSE:   Microsoft Excel's PRICE function. Returns the price per
   *            $100 face value of a security that pays periodic interest.
  *
  * USAGE:     price = price_slk(settlement,maturity,rate,yield,
  *                             redemp,freq,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               rate - the security's annual coupon rate.
  *               yield - the security's annual yield.
  *               redemp - the security's redemption"
F.FINANCE.PRICE_SLK,CMP,306.0,Statement Source,Comment,CMT,2.0,101.0,,"value per
  *                   $100 face value.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *                   freq = 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *--------------------------------------------------------------------*/"
F.FINANCE.PRICE_SLK,CMP,307.0,Statement Source,Executable,IF,0.0,2.0,,if yield < 0 | rate < 0 | redemp <= 0 then
F.FINANCE.PRICE_SLK,CMP,308.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.PRICE_SLK,CMP,309.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 | settlement >= maturity then
F.FINANCE.PRICE_SLK,CMP,310.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.PRICE_SLK,CMP,311.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = coupdaysnc_slk(settlement,maturity,freq,basis);"
F.FINANCE.PRICE_SLK,CMP,312.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"E = coupdays_slk(settlement, maturity, freq, basis);"
F.FINANCE.PRICE_SLK,CMP,313.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"N = coupnum_slk(settlement, maturity, freq, basis);"
F.FINANCE.PRICE_SLK,CMP,314.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = coupdaybs_slk(settlement, maturity, freq, basis);"
F.FINANCE.PRICE_SLK,CMP,315.0,Statement Source,Executable,ASSIGN,0.0,1.0,,temp1 = 100*rate/freq;
F.FINANCE.PRICE_SLK,CMP,316.0,Statement Source,Executable,ASSIGN,0.0,1.0,,temp2 = 1 + yield/freq;
F.FINANCE.PRICE_SLK,CMP,317.0,Statement Source,Executable,ASSIGN,0.0,1.0,,temp3 = DSC/E;
F.FINANCE.PRICE_SLK,CMP,318.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part1 = redemp/(temp2**(N - 1 + temp3));
F.FINANCE.PRICE_SLK,CMP,319.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part2 = 0;
F.FINANCE.PRICE_SLK,CMP,320.0,Statement Source,Executable,DO,0.0,3.0,,do k = 1 to N;
F.FINANCE.PRICE_SLK,CMP,321.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part2 = part2 + temp1/(temp2**(k - 1 + temp3));
F.FINANCE.PRICE_SLK,CMP,322.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.PRICE_SLK,CMP,323.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part3 = temp1*A/E;
F.FINANCE.PRICE_SLK,CMP,324.0,Statement Source,Executable,ASSIGN,0.0,1.0,,price = part1 + part2 - part3;
F.FINANCE.PRICE_SLK,CMP,325.0,Statement Source,Executable,RETURN,0.0,1.0,,return(price);
F.FINANCE.PRICE_SLK,CMP,326.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.ODDLPRICE_SLK,CMP,327.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[oddlprice_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel ODDLPRICE]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[linterest]]></S><S n=""Kind""><![CDATA[v]"
F.FINANCE.ODDLPRICE_SLK,CMP,328.0,Prototype,FCmp,finance,1.0,,,"]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[yield]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[redemp]]></S><S n=""Kind""><![CDATA["
F.FINANCE.ODDLPRICE_SLK,CMP,329.0,Prototype,FCmp,finance,2.0,,,"v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">0</N><N n=""Flag1"">128</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">0</N><N n=""Flag1"">128</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.ODDLPRICE_SLK,CMP,330.0,Header,Function,Excel ODDLPRICE,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.373</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel ODDLPRICE]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.ODDLPRICE_SLK,CMP,331.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function oddlprice_slk(settlement,maturity,linterest,rate, yield,redemp,freq,basis) label= ""Excel ODDLPRICE"";"
F.FINANCE.ODDLPRICE_SLK,CMP,332.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     oddlprice_slk
  *
  * PURPOSE:   Microsoft Excel's ODDLPRICE function. Returns the price per
   *            $100 face value of a security having an odd (short or long)
   *            last period.
  *
  * USAGE:     oddlprice = odddprice_slk(settlement,maturity,linterest,
  *                                      rate,yield,redemp,freq,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               linterest - security's last coupon date.
  *                   Expressed as SAS date"
F.FINANCE.ODDLPRICE_SLK,CMP,333.0,Statement Source,Comment,CMT,1.0,101.0,,", e.g., '15feb98'd
  *               fcoupon - security's first coupon date.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               rate - the security's annual coupon rate.
  *               yield - the security's annual yield.
  *               redemp - the security's redemption value per
  *                   $100 face value.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *                   freq = 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  * NOTES: Excel appears to treat basis = 2 and 3 the same as basis = 1.
  *        We corrected this.
  *--------------------------------------------------------"
F.FINANCE.ODDLPRICE_SLK,CMP,334.0,Statement Source,Comment,CMT,2.0,101.0,,------------*/
F.FINANCE.ODDLPRICE_SLK,CMP,335.0,Statement Source,Executable,IF,0.0,2.0,,if yield < 0 | rate < 0 then
F.FINANCE.ODDLPRICE_SLK,CMP,336.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.ODDLPRICE_SLK,CMP,337.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.ODDLPRICE_SLK,CMP,338.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ODDLPRICE_SLK,CMP,339.0,Statement Source,Executable,IF,0.0,2.0,,if ~(maturity > settlement & settlement > linterest) then
F.FINANCE.ODDLPRICE_SLK,CMP,340.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ODDLPRICE_SLK,CMP,341.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"oddlprice = solve(""oddlyield_slk"",{.}, yield, settlement, maturity, linterest, rate, ., redemp, freq, basis);"
F.FINANCE.ODDLPRICE_SLK,CMP,342.0,Statement Source,Executable,RETURN,0.0,1.0,,return(oddlprice);
F.FINANCE.ODDLPRICE_SLK,CMP,343.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.ODDLYIELD_SLK,CMP,344.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[oddlyield_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel ODDLYIELD]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[linterest]]></S><S n=""Kind""><![CDATA[v]"
F.FINANCE.ODDLYIELD_SLK,CMP,345.0,Prototype,FCmp,finance,1.0,,,"]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[pr]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[redemp]]></S><S n=""Kind""><![CDATA[v]]"
F.FINANCE.ODDLYIELD_SLK,CMP,346.0,Prototype,FCmp,finance,2.0,,,"></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.ODDLYIELD_SLK,CMP,347.0,Header,Function,Excel ODDLYIELD,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.379</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel ODDLYIELD]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.ODDLYIELD_SLK,CMP,348.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function oddlyield_slk(settlement,maturity,linterest,rate, pr,redemp,freq,basis) label= ""Excel ODDLYIELD"";"
F.FINANCE.ODDLYIELD_SLK,CMP,349.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     oddlyield_slk
  *
  * PURPOSE:   Microsoft Excel's ODDLYIELD function. Returns the annual
   *            yield of a security having an odd (short or long ) last
   *            period.
  *
  * USAGE:     odffyield = oddfyield_slk(settlement,maturity,linterest,
  *                            fcoupon,rate,pf,redemp,freq,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               linterest -  security's last coupon date.
  *                   Expressed as SAS date, e.g., '10jun98"
F.FINANCE.ODDLYIELD_SLK,CMP,350.0,Statement Source,Comment,CMT,2.0,101.0,,"'d.
  *               rate - the security's annual coupon rate.
  *               pr - the security's price.
  *               redemp - the security's redemption value per
  *                   $100 face value.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *                   freq = 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  * NOTES: Excel appears to treat basis = 2 and 3 the same as basis = 1.
  *        We corrected this.
  *--------------------------------------------------------------------*/"
F.FINANCE.ODDLYIELD_SLK,CMP,351.0,Statement Source,Executable,IF,0.0,2.0,,if pr < 0 | rate < 0 then
F.FINANCE.ODDLYIELD_SLK,CMP,352.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.ODDLYIELD_SLK,CMP,353.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.ODDLYIELD_SLK,CMP,354.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ODDLYIELD_SLK,CMP,355.0,Statement Source,Executable,IF,0.0,2.0,,if ~(maturity > settlement & settlement > linterest) then
F.FINANCE.ODDLYIELD_SLK,CMP,356.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ODDLYIELD_SLK,CMP,357.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"NL = coupdays_slk(linterest, maturity, freq, basis);"
F.FINANCE.ODDLYIELD_SLK,CMP,358.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"datLM = datdif(linterest, maturity, 'act/act');"
F.FINANCE.ODDLYIELD_SLK,CMP,359.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"dNL = coupdays_slk(linterest, maturity, freq, 1);"
F.FINANCE.ODDLYIELD_SLK,CMP,360.0,Statement Source,Executable,IF,0.0,2.0,,if datLM < dNL then
F.FINANCE.ODDLYIELD_SLK,CMP,361.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDLYIELD_SLK,CMP,362.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.ODDLYIELD_SLK,CMP,363.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.ODDLYIELD_SLK,CMP,364.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDLYIELD_SLK,CMP,365.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(linterest,settlement,'30/360');"
F.FINANCE.ODDLYIELD_SLK,CMP,366.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DC = datdif(linterest, maturity, '30/360');"
F.FINANCE.ODDLYIELD_SLK,CMP,367.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = datdif(settlement, maturity, '30/360');"
F.FINANCE.ODDLYIELD_SLK,CMP,368.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDLYIELD_SLK,CMP,369.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.ODDLYIELD_SLK,CMP,370.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDLYIELD_SLK,CMP,371.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(linterest,settlement,'act/act');"
F.FINANCE.ODDLYIELD_SLK,CMP,372.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DC = datdif(linterest, maturity, 'act/act');"
F.FINANCE.ODDLYIELD_SLK,CMP,373.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = datdif(settlement, maturity, 'act/act');"
F.FINANCE.ODDLYIELD_SLK,CMP,374.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDLYIELD_SLK,CMP,375.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.ODDLYIELD_SLK,CMP,376.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDLYIELD_SLK,CMP,377.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(linterest,settlement,'act/360');"
F.FINANCE.ODDLYIELD_SLK,CMP,378.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DC = datdif(linterest, maturity, 'act/360');"
F.FINANCE.ODDLYIELD_SLK,CMP,379.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = datdif(settlement, maturity, 'act/360');"
F.FINANCE.ODDLYIELD_SLK,CMP,380.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDLYIELD_SLK,CMP,381.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.ODDLYIELD_SLK,CMP,382.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDLYIELD_SLK,CMP,383.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(linterest,settlement,'act/365');"
F.FINANCE.ODDLYIELD_SLK,CMP,384.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DC = datdif(linterest, maturity, 'act/365');"
F.FINANCE.ODDLYIELD_SLK,CMP,385.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = datdif(settlement, maturity, 'act/365');"
F.FINANCE.ODDLYIELD_SLK,CMP,386.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDLYIELD_SLK,CMP,387.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.ODDLYIELD_SLK,CMP,388.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDLYIELD_SLK,CMP,389.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif4_slk(linterest,settlement);"
F.FINANCE.ODDLYIELD_SLK,CMP,390.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DC = datdif4_slk(linterest, maturity);"
F.FINANCE.ODDLYIELD_SLK,CMP,391.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = datdif4_slk(settlement, maturity);"
F.FINANCE.ODDLYIELD_SLK,CMP,392.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDLYIELD_SLK,CMP,393.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.ODDLYIELD_SLK,CMP,394.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.ODDLYIELD_SLK,CMP,395.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDLYIELD_SLK,CMP,396.0,Statement Source,Executable,ASSIGN,0.0,1.0,,rA = A/NL;
F.FINANCE.ODDLYIELD_SLK,CMP,397.0,Statement Source,Executable,ASSIGN,0.0,1.0,,rDC = DC/NL;
F.FINANCE.ODDLYIELD_SLK,CMP,398.0,Statement Source,Executable,ASSIGN,0.0,1.0,,rDSC = DSC/NL;
F.FINANCE.ODDLYIELD_SLK,CMP,399.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDLYIELD_SLK,CMP,400.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.ODDLYIELD_SLK,CMP,401.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDLYIELD_SLK,CMP,402.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A1 = coupdaysnc_slk(linterest, maturity, freq, basis);"
F.FINANCE.ODDLYIELD_SLK,CMP,403.0,Statement Source,Executable,ASSIGN,0.0,1.0,,DC1 = A1;
F.FINANCE.ODDLYIELD_SLK,CMP,404.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC1 = coupdaysnc_slk(settlement, maturity, freq, basis);"
F.FINANCE.ODDLYIELD_SLK,CMP,405.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"nDC = coupnum_slk(linterest, maturity, freq, basis) - 1;"
F.FINANCE.ODDLYIELD_SLK,CMP,406.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"nDSC = coupnum_slk(settlement, maturity, freq, basis) - 1;"
F.FINANCE.ODDLYIELD_SLK,CMP,407.0,Statement Source,Executable,ASSIGN,0.0,1.0,,nA = nDC - nDSC - 1;
F.FINANCE.ODDLYIELD_SLK,CMP,408.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"Alast = coupdaybs_slk(settlement, maturity, freq, basis);"
F.FINANCE.ODDLYIELD_SLK,CMP,409.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"NLlast = coupdays_slk(settlement, maturity, freq, basis);"
F.FINANCE.ODDLYIELD_SLK,CMP,410.0,Statement Source,Executable,ASSIGN,0.0,1.0,,rA = A1/NL + nA + Alast/NLlast;
F.FINANCE.ODDLYIELD_SLK,CMP,411.0,Statement Source,Executable,ASSIGN,0.0,1.0,,rDC = DC1/NL + nDC;
F.FINANCE.ODDLYIELD_SLK,CMP,412.0,Statement Source,Executable,ASSIGN,0.0,1.0,,rDSC = DSC1/NLlast + nDSC;
F.FINANCE.ODDLYIELD_SLK,CMP,413.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDLYIELD_SLK,CMP,414.0,Statement Source,Executable,ASSIGN,0.0,1.0,,oddly1 = (redemp + rDC*100*rate/freq);
F.FINANCE.ODDLYIELD_SLK,CMP,415.0,Statement Source,Executable,ASSIGN,0.0,1.0,,oddly2 = (pr + rA*100*rate/freq);
F.FINANCE.ODDLYIELD_SLK,CMP,416.0,Statement Source,Executable,ASSIGN,0.0,1.0,,oddly3 = freq/rDSC;
F.FINANCE.ODDLYIELD_SLK,CMP,417.0,Statement Source,Executable,ASSIGN,0.0,1.0,,oddlyield = ((oddly1 - oddly2)/oddly2)*oddly3;
F.FINANCE.ODDLYIELD_SLK,CMP,418.0,Statement Source,Executable,RETURN,0.0,1.0,,return(oddlyield);
F.FINANCE.ODDLYIELD_SLK,CMP,419.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.ODDFYIELD_SLK,CMP,420.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[oddfyield_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel ODDFYIELD]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[issue]]></S><S n=""Kind""><![CDATA[v]]></"
F.FINANCE.ODDFYIELD_SLK,CMP,421.0,Prototype,FCmp,finance,1.0,,,"S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[fcoupon]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[pr]]></S><S n=""Kind""><![CDATA[v]]></"
F.FINANCE.ODDFYIELD_SLK,CMP,422.0,Prototype,FCmp,finance,1.0,,,"S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[redemp]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">0</N><N n=""Flag1"">128</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">0</N><N n=""Flag1"">128</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></"
F.FINANCE.ODDFYIELD_SLK,CMP,423.0,Prototype,FCmp,finance,2.0,,,"S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.ODDFYIELD_SLK,CMP,424.0,Header,Function,Excel ODDFYIELD,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.381</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel ODDFYIELD]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.ODDFYIELD_SLK,CMP,425.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function oddfyield_slk(settlement,maturity,issue,fcoupon,rate,pr, redemp,freq,basis) label= ""Excel ODDFYIELD"";"
F.FINANCE.ODDFYIELD_SLK,CMP,426.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     oddfyield_slk
  *
  * PURPOSE:   Microsoft Excel's ODDFYIELD function. Returns the annual
   *            yield of a security having an odd (short or long ) first
   *            period.
  *
  * USAGE:     odffyield = oddfyield_slk(settlement,maturity,issue,fcoupon,
  *                                      rate,pf,redemp,freq,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               issue - security's issue date.
  *                   Expressed as SAS date, e.g., '15feb98'd
"
F.FINANCE.ODDFYIELD_SLK,CMP,427.0,Statement Source,Comment,CMT,2.0,101.0,,"*               fcoupon - security's first coupon date.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               rate - the security's annual coupon rate.
  *               pr - the security's price.
  *               redemp - the security's redemption value per
  *                   $100 face value.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *                   freq = 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *--------------------------------------------------------------------*/"
F.FINANCE.ODDFYIELD_SLK,CMP,428.0,Statement Source,Executable,IF,0.0,2.0,,if pr <= 0 | rate < 0 then
F.FINANCE.ODDFYIELD_SLK,CMP,429.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.ODDFYIELD_SLK,CMP,430.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.ODDFYIELD_SLK,CMP,431.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ODDFYIELD_SLK,CMP,432.0,Statement Source,Executable,IF,0.0,2.0,,if ~(maturity > fcoupon & fcoupon > settlement & settlement > issue) then
F.FINANCE.ODDFYIELD_SLK,CMP,433.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ODDFYIELD_SLK,CMP,434.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"oddfyield = solve( ""oddfprice_slk"", {.}, pr, settlement, maturity, issue, fcoupon, rate, ., redemp, freq, basis );"
F.FINANCE.ODDFYIELD_SLK,CMP,435.0,Statement Source,Executable,RETURN,0.0,1.0,,return(oddfyield);
F.FINANCE.ODDFYIELD_SLK,CMP,436.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.ODDFPRICE_SLK,CMP,437.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[oddfprice_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel ODDFPRICE]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[issue]]></S><S n=""Kind""><![CDATA[v]]></"
F.FINANCE.ODDFPRICE_SLK,CMP,438.0,Prototype,FCmp,finance,1.0,,,"S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[fcoupon]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[yield]]></S><S n=""Kind""><![CDATA[v]]"
F.FINANCE.ODDFPRICE_SLK,CMP,439.0,Prototype,FCmp,finance,1.0,,,"></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[redemp]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]"
F.FINANCE.ODDFPRICE_SLK,CMP,440.0,Prototype,FCmp,finance,2.0,,,"]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.ODDFPRICE_SLK,CMP,441.0,Header,Function,Excel ODDFPRICE,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.382</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel ODDFPRICE]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.ODDFPRICE_SLK,CMP,442.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function oddfprice_slk(settlement,maturity,issue,fcoupon,rate,yield, redemp,freq,basis) label= ""Excel ODDFPRICE"";"
F.FINANCE.ODDFPRICE_SLK,CMP,443.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     oddfprice_slk
  *
  * PURPOSE:   Microsoft Excel's ODDFPRICE function. Returns the price per
   *            $100 face value of a security having an odd (short or long)
   *            first period.
  *
  * USAGE:     odffprice = oddfprice_slk(settlement,maturity,issue,fcoupon,
  *                                      rate,yield,redemp,freq,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               issue - security's issue date.
  *                   Expressed as SAS date, e.g"
F.FINANCE.ODDFPRICE_SLK,CMP,444.0,Statement Source,Comment,CMT,2.0,101.0,,"., '15feb98'd
  *               fcoupon - security's first coupon date.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               rate - the security's annual coupon rate.
  *               yield - the security's annual yield.
  *               redemp - the security's redemption value per
  *                   $100 face value.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *                   freq = 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *--------------------------------------------------------------------*/"
F.FINANCE.ODDFPRICE_SLK,CMP,445.0,Statement Source,Executable,IF,0.0,2.0,,if yield < 0 | rate < 0 | redemp <= 0 then
F.FINANCE.ODDFPRICE_SLK,CMP,446.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ODDFPRICE_SLK,CMP,447.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.ODDFPRICE_SLK,CMP,448.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ODDFPRICE_SLK,CMP,449.0,Statement Source,Executable,IF,0.0,2.0,,if ~(maturity > fcoupon & fcoupon > settlement & settlement > issue) then
F.FINANCE.ODDFPRICE_SLK,CMP,450.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.ODDFPRICE_SLK,CMP,451.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.ODDFPRICE_SLK,CMP,452.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.ODDFPRICE_SLK,CMP,453.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDFPRICE_SLK,CMP,454.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,settlement,'30/360');"
F.FINANCE.ODDFPRICE_SLK,CMP,455.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = datdif(settlement, fcoupon, '30/360');"
F.FINANCE.ODDFPRICE_SLK,CMP,456.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DFC = datdif(issue, fcoupon, '30/360');"
F.FINANCE.ODDFPRICE_SLK,CMP,457.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDFPRICE_SLK,CMP,458.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.ODDFPRICE_SLK,CMP,459.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDFPRICE_SLK,CMP,460.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,settlement,'act/act');"
F.FINANCE.ODDFPRICE_SLK,CMP,461.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = datdif(settlement, fcoupon, 'act/act');"
F.FINANCE.ODDFPRICE_SLK,CMP,462.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DFC = datdif(issue, fcoupon, 'act/act');"
F.FINANCE.ODDFPRICE_SLK,CMP,463.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDFPRICE_SLK,CMP,464.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.ODDFPRICE_SLK,CMP,465.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDFPRICE_SLK,CMP,466.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,settlement,'act/360');"
F.FINANCE.ODDFPRICE_SLK,CMP,467.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = datdif(settlement, fcoupon, 'act/360');"
F.FINANCE.ODDFPRICE_SLK,CMP,468.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DFC = datdif(issue, fcoupon, 'act/360');"
F.FINANCE.ODDFPRICE_SLK,CMP,469.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDFPRICE_SLK,CMP,470.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.ODDFPRICE_SLK,CMP,471.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDFPRICE_SLK,CMP,472.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif(issue,settlement,'act/365');"
F.FINANCE.ODDFPRICE_SLK,CMP,473.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = datdif(settlement, fcoupon, 'act/365');"
F.FINANCE.ODDFPRICE_SLK,CMP,474.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DFC = datdif(issue, fcoupon, 'act/365');"
F.FINANCE.ODDFPRICE_SLK,CMP,475.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDFPRICE_SLK,CMP,476.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.ODDFPRICE_SLK,CMP,477.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDFPRICE_SLK,CMP,478.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A = datdif4_slk(issue,settlement);"
F.FINANCE.ODDFPRICE_SLK,CMP,479.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSC = datdif4_slk(settlement, fcoupon);"
F.FINANCE.ODDFPRICE_SLK,CMP,480.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DFC = datdif4_slk(issue, fcoupon);"
F.FINANCE.ODDFPRICE_SLK,CMP,481.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDFPRICE_SLK,CMP,482.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.ODDFPRICE_SLK,CMP,483.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.ODDFPRICE_SLK,CMP,484.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDFPRICE_SLK,CMP,485.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"E = coupdays_slk(settlement, maturity, freq, basis);"
F.FINANCE.ODDFPRICE_SLK,CMP,486.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"N = coupnum_slk(fcoupon, maturity, freq, basis) + 1;"
F.FINANCE.ODDFPRICE_SLK,CMP,487.0,Statement Source,Executable,ASSIGN,0.0,1.0,,transyld = 1 + yield/freq;
F.FINANCE.ODDFPRICE_SLK,CMP,488.0,Statement Source,Executable,ASSIGN,0.0,1.0,,transrate = 100*rate/freq;
F.FINANCE.ODDFPRICE_SLK,CMP,489.0,Statement Source,Executable,ASSIGN,0.0,1.0,,DSCratio = DSC/E;
F.FINANCE.ODDFPRICE_SLK,CMP,490.0,Statement Source,Executable,IF,0.0,2.0,,if DFC < E then
F.FINANCE.ODDFPRICE_SLK,CMP,491.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDFPRICE_SLK,CMP,492.0,Statement Source,Executable,ASSIGN,0.0,1.0,,DFCratio = DFC/E;
F.FINANCE.ODDFPRICE_SLK,CMP,493.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part1 = redemp/(transyld**(N - 1 + DSCratio));
F.FINANCE.ODDFPRICE_SLK,CMP,494.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part2 = (transrate*DFCratio)/transyld**DSCratio;
F.FINANCE.ODDFPRICE_SLK,CMP,495.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part3 = 0;
F.FINANCE.ODDFPRICE_SLK,CMP,496.0,Statement Source,Executable,DO,0.0,3.0,,do k = 2 to N;
F.FINANCE.ODDFPRICE_SLK,CMP,497.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part3+ transrate/(transyld**(k - 1 + DSCratio));
F.FINANCE.ODDFPRICE_SLK,CMP,498.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDFPRICE_SLK,CMP,499.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part4 = transrate*A/E;
F.FINANCE.ODDFPRICE_SLK,CMP,500.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDFPRICE_SLK,CMP,501.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.ODDFPRICE_SLK,CMP,502.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.ODDFPRICE_SLK,CMP,503.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"ncd = coupncd_slk(issue, fcoupon, freq, basis);"
F.FINANCE.ODDFPRICE_SLK,CMP,504.0,Statement Source,Executable,IF,0.0,2.0,,if ncd = fcoupon then
F.FINANCE.ODDFPRICE_SLK,CMP,505.0,Statement Source,Executable,ASSIGN,0.0,1.0,,A1 = 0;
F.FINANCE.ODDFPRICE_SLK,CMP,506.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.ODDFPRICE_SLK,CMP,507.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"A1 = coupdaysnc_slk(issue, fcoupon, freq, basis);"
F.FINANCE.ODDFPRICE_SLK,CMP,508.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"NL1 = coupdays_slk(issue, fcoupon, freq, basis);"
F.FINANCE.ODDFPRICE_SLK,CMP,509.0,Statement Source,Executable,ASSIGN,0.0,1.0,,DC1 = A1;
F.FINANCE.ODDFPRICE_SLK,CMP,510.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"nA = coupnum_slk(issue, settlement, freq, basis) - 1;"
F.FINANCE.ODDFPRICE_SLK,CMP,511.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"nDC = coupnum_slk(issue, fcoupon, freq, basis) - 1;"
F.FINANCE.ODDFPRICE_SLK,CMP,512.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"Anc = coupdaybs_slk(settlement, fcoupon, freq, basis);"
F.FINANCE.ODDFPRICE_SLK,CMP,513.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"NLnc = coupdays_slk(settlement, fcoupon, freq, basis);"
F.FINANCE.ODDFPRICE_SLK,CMP,514.0,Statement Source,Executable,ASSIGN,0.0,1.0,,sumDC = nDC + DC1/NL1;
F.FINANCE.ODDFPRICE_SLK,CMP,515.0,Statement Source,Executable,ASSIGN,0.0,1.0,,sumA = nA + A1/NL1 + Anc/NLnc;
F.FINANCE.ODDFPRICE_SLK,CMP,516.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"Nq = coupnum_slk(settlement, fcoupon, freq, basis) - 1;"
F.FINANCE.ODDFPRICE_SLK,CMP,517.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part1 = redemp/transyld**(N - 1 + Nq + DSCratio);
F.FINANCE.ODDFPRICE_SLK,CMP,518.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part2 = (transrate*sumDC)/transyld**(Nq + DSCratio);
F.FINANCE.ODDFPRICE_SLK,CMP,519.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part3 = 0;
F.FINANCE.ODDFPRICE_SLK,CMP,520.0,Statement Source,Executable,DO,0.0,3.0,,do k = 2 to N;
F.FINANCE.ODDFPRICE_SLK,CMP,521.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part3+ transrate/transyld**(k - 1 + Nq + DSCratio);
F.FINANCE.ODDFPRICE_SLK,CMP,522.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDFPRICE_SLK,CMP,523.0,Statement Source,Executable,ASSIGN,0.0,1.0,,part4 = transrate*sumA;
F.FINANCE.ODDFPRICE_SLK,CMP,524.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.ODDFPRICE_SLK,CMP,525.0,Statement Source,Executable,ASSIGN,0.0,1.0,,oddfprice = part1 + part2 + part3 - part4;
F.FINANCE.ODDFPRICE_SLK,CMP,526.0,Statement Source,Executable,RETURN,0.0,1.0,,return(oddfprice);
F.FINANCE.ODDFPRICE_SLK,CMP,527.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.COUPDAYBS_SLK,CMP,528.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[coupdaybs_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel COUPDAYBS]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S"
F.FINANCE.COUPDAYBS_SLK,CMP,529.0,Prototype,FCmp,finance,2.0,,,"><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.COUPDAYBS_SLK,CMP,530.0,Header,Function,Excel COUPDAYBS,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.385</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel COUPDAYBS]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.COUPDAYBS_SLK,CMP,531.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function coupdaybs_slk(settlement, maturity, freq, basis) label= ""Excel COUPDAYBS"";"
F.FINANCE.COUPDAYBS_SLK,CMP,532.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     coupdaybs_slk
  *
  * PURPOSE:   Microsoft Excel's COUPDAYBS function. Returns number
  *            of days from the beginning of the coupon period to
  *            the settlement date.
  *
  * USAGE:     coupdaybs = coupdaybs_slk(settlement,maturity,freq,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *"
F.FINANCE.COUPDAYBS_SLK,CMP,533.0,Statement Source,Comment,CMT,2.0,101.0,,"freq = 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *--------------------------------------------------------------------*/"
F.FINANCE.COUPDAYBS_SLK,CMP,534.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.COUPDAYBS_SLK,CMP,535.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.COUPDAYBS_SLK,CMP,536.0,Statement Source,Executable,IF,0.0,2.0,,if freq ~= 1 & freq ~= 2 & freq ~= 4 then
F.FINANCE.COUPDAYBS_SLK,CMP,537.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPDAYBS_SLK,CMP,538.0,Statement Source,Executable,IF,0.0,2.0,,if settlement >= maturity then
F.FINANCE.COUPDAYBS_SLK,CMP,539.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPDAYBS_SLK,CMP,540.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"pcd = couppcd_slk(settlement, maturity, freq, basis);"
F.FINANCE.COUPDAYBS_SLK,CMP,541.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.COUPDAYBS_SLK,CMP,542.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.COUPDAYBS_SLK,CMP,543.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupdaybs = datdif(pcd,settlement,'30/360');"
F.FINANCE.COUPDAYBS_SLK,CMP,544.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.COUPDAYBS_SLK,CMP,545.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupdaybs = datdif(pcd,settlement,'act/act');"
F.FINANCE.COUPDAYBS_SLK,CMP,546.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPDAYBS_SLK,CMP,547.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupdaybs = datdif(pcd,settlement,'act/360');"
F.FINANCE.COUPDAYBS_SLK,CMP,548.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.COUPDAYBS_SLK,CMP,549.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupdaybs = datdif(pcd,settlement,'act/365');"
F.FINANCE.COUPDAYBS_SLK,CMP,550.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.COUPDAYBS_SLK,CMP,551.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupdaybs = datdif4_slk(pcd,settlement);"
F.FINANCE.COUPDAYBS_SLK,CMP,552.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPDAYBS_SLK,CMP,553.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPDAYBS_SLK,CMP,554.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYBS_SLK,CMP,555.0,Statement Source,Executable,RETURN,0.0,1.0,,return(coupdaybs);
F.FINANCE.COUPDAYBS_SLK,CMP,556.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.YIELDDISC_SLK,CMP,557.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[yielddisc_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel YIELDDISC]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[pr]]></S><S n=""Kind""><![CDATA[v]]></S><"
F.FINANCE.YIELDDISC_SLK,CMP,558.0,Prototype,FCmp,finance,2.0,,,"S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[redemp]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.YIELDDISC_SLK,CMP,559.0,Header,Function,Excel YIELDDISC,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.386</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel YIELDDISC]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.YIELDDISC_SLK,CMP,560.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function yielddisc_slk(settlement,maturity,pr,redemp,basis) label= ""Excel YIELDDISC"";"
F.FINANCE.YIELDDISC_SLK,CMP,561.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     yielddisc_slk
  *
  * PURPOSE:   Microsoft Excel's YIELDDISC function. Returns the annual
  *            yield for a discounted security.
  *
  * USAGE:     ydisc = yielddisc_slk( settlement, maturity, pr,
  *                                   redemp, basis );
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Act"
F.FINANCE.YIELDDISC_SLK,CMP,562.0,Statement Source,Comment,CMT,2.0,101.0,,"ual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *               pr - the security's price per $100 face value,
  *                    price must be >0.
  *               redemp - security's redemption value per $100
  *                   face value, redemption must be >0.
  *
  *--------------------------------------------------------------------*/"
F.FINANCE.YIELDDISC_SLK,CMP,563.0,Statement Source,Executable,IF,0.0,2.0,,if redemp <= 0 | pr <= 0 then
F.FINANCE.YIELDDISC_SLK,CMP,564.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.YIELDDISC_SLK,CMP,565.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.YIELDDISC_SLK,CMP,566.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.YIELDDISC_SLK,CMP,567.0,Statement Source,Executable,IF,0.0,2.0,,if settlement >= maturity then
F.FINANCE.YIELDDISC_SLK,CMP,568.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.YIELDDISC_SLK,CMP,569.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.YIELDDISC_SLK,CMP,570.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.YIELDDISC_SLK,CMP,571.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.YIELDDISC_SLK,CMP,572.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.YIELDDISC_SLK,CMP,573.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'30/360');"
F.FINANCE.YIELDDISC_SLK,CMP,574.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.YIELDDISC_SLK,CMP,575.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.YIELDDISC_SLK,CMP,576.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.YIELDDISC_SLK,CMP,577.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"newyeard = intnx('year', maturity - 1, 0);"
F.FINANCE.YIELDDISC_SLK,CMP,578.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"endyeard = intnx('year', maturity - 1, 1) - 1;"
F.FINANCE.YIELDDISC_SLK,CMP,579.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = endyeard - newyeard + 1;
F.FINANCE.YIELDDISC_SLK,CMP,580.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/act');"
F.FINANCE.YIELDDISC_SLK,CMP,581.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.YIELDDISC_SLK,CMP,582.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.YIELDDISC_SLK,CMP,583.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.YIELDDISC_SLK,CMP,584.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.YIELDDISC_SLK,CMP,585.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/360');"
F.FINANCE.YIELDDISC_SLK,CMP,586.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.YIELDDISC_SLK,CMP,587.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.YIELDDISC_SLK,CMP,588.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.YIELDDISC_SLK,CMP,589.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 365;
F.FINANCE.YIELDDISC_SLK,CMP,590.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/365');"
F.FINANCE.YIELDDISC_SLK,CMP,591.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.YIELDDISC_SLK,CMP,592.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.YIELDDISC_SLK,CMP,593.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.YIELDDISC_SLK,CMP,594.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.YIELDDISC_SLK,CMP,595.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif4_slk(settlement,maturity);"
F.FINANCE.YIELDDISC_SLK,CMP,596.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.YIELDDISC_SLK,CMP,597.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.YIELDDISC_SLK,CMP,598.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.YIELDDISC_SLK,CMP,599.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.YIELDDISC_SLK,CMP,600.0,Statement Source,Executable,ASSIGN,0.0,1.0,,yielddisc = (redemp - pr)/pr*B/DSM;
F.FINANCE.YIELDDISC_SLK,CMP,601.0,Statement Source,Executable,RETURN,0.0,1.0,,return(yielddisc);
F.FINANCE.YIELDDISC_SLK,CMP,602.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.YIELD_SLK,CMP,603.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[yield_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel YIELD]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""T"
F.FINANCE.YIELD_SLK,CMP,604.0,Prototype,FCmp,finance,1.0,,,"ype""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[pr]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[redemp]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type"""
F.FINANCE.YIELD_SLK,CMP,605.0,Prototype,FCmp,finance,2.0,,,"><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.YIELD_SLK,CMP,606.0,Header,Function,Excel YIELD,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.388</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel YIELD]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.YIELD_SLK,CMP,607.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function yield_slk(settlement,maturity,rate,pr,redemp,freq,basis) label= ""Excel YIELD"";"
F.FINANCE.YIELD_SLK,CMP,608.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     yield_slk
  *
  * PURPOSE:   Microsoft Excel's YIELD function. Returns the yield on
  *            a security that pays periodic interest.
  *
  * USAGE:     yield = yield_slk( settlement, maturity, rate, price,
  *                            redemption, freq, basis );
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *"
F.FINANCE.YIELD_SLK,CMP,609.0,Statement Source,Comment,CMT,1.0,101.0,,"freq = 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *               rate - the security's annual coupon rate, must be >=0.
  *               price - the security's price per $100 face value,
  *                   price must be >0.
  *               redemption - security's redemption value per $100
  *                   face value, redemption must be >0.
  *
  * NOTES:   The yield_slk function differs from yield function in SAS in
  *          its use of dirty price (or accrued interest adjusted price)
  *          in obtaining the yield.
  *
  *          Dirty price is obtained by adding accrued interest to price:
  *          dirty_price = pr + accrued_interest;
  *
  *          Accrued interest (AI) is obtained as:
  *          AI = r"
F.FINANCE.YIELD_SLK,CMP,610.0,Statement Source,Comment,CMT,2.0,101.0,,"ate*redemp/freq*(1-freq*k0);
  *          where k0 = coupdaysnc(settlement,maturity,freq,basis)/
  *                     coupdays(settlement,maturity,freq,basis)/freq;
  *                     ie., time from settlement to next coupon date.
  *          expressed in terms of the number of periods.
  *
  *          yield is calculated as follows:
  *          yield = yieldp(redemption,rate,freq,k,k0,p);
  *          where k = coupnum(settlement,maturity,freq,basis);
  *                    i.e., number of coupons payable between
  *                    settlement and maturity.
  *                k0 = coupdaysnc(settlement,maturity,freq,basis)/
  *                     coupdays(settlement,maturity,freq,basis)/freq;
  *                     i.e., time from settlement to next coupon date.
  *--------------------------------------------------------------------*/"
F.FINANCE.YIELD_SLK,CMP,611.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.YIELD_SLK,CMP,612.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.YIELD_SLK,CMP,613.0,Statement Source,Executable,IF,0.0,2.0,,if settlement >= maturity then
F.FINANCE.YIELD_SLK,CMP,614.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.YIELD_SLK,CMP,615.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"k = coupnum_slk(settlement,maturity,freq,basis);"
F.FINANCE.YIELD_SLK,CMP,616.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"cdaysnc = coupdaysnc_slk(settlement, maturity, freq, basis);"
F.FINANCE.YIELD_SLK,CMP,617.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"cdays = coupdays_slk(settlement, maturity, freq, basis);"
F.FINANCE.YIELD_SLK,CMP,618.0,Statement Source,Executable,ASSIGN,0.0,1.0,,k0 = cdaysnc/cdays/freq;
F.FINANCE.YIELD_SLK,CMP,619.0,Statement Source,Executable,ASSIGN,0.0,1.0,,AI = rate*redemp/freq*(1-freq*k0);
F.FINANCE.YIELD_SLK,CMP,620.0,Statement Source,Comment,CMT,0.0,101.0,,/* accrued interest */
F.FINANCE.YIELD_SLK,CMP,621.0,Statement Source,Executable,ASSIGN,0.0,1.0,,p = pr + AI;
F.FINANCE.YIELD_SLK,CMP,622.0,Statement Source,Comment,CMT,0.0,101.0,,/* dirty price */
F.FINANCE.YIELD_SLK,CMP,623.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"yield = yieldp(redemp,rate,freq,k,k0,p);"
F.FINANCE.YIELD_SLK,CMP,624.0,Statement Source,Executable,RETURN,0.0,1.0,,return(yield);
F.FINANCE.YIELD_SLK,CMP,625.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.DB_SLK,CMP,626.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[db_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel DB]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[cost]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[salvage]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[life]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n"
F.FINANCE.DB_SLK,CMP,627.0,Prototype,FCmp,finance,2.0,,,"]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[period]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[month]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.DB_SLK,CMP,628.0,Header,Function,Excel DB,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.391</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel DB]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.DB_SLK,CMP,629.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function db_slk(cost,salvage,life,period,month) label= ""Excel DB"";"
F.FINANCE.DB_SLK,CMP,630.0,Statement Source,Comment,CMT,0.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     db_slk
  *
  * PURPOSE:   Microsoft Excel's DB function. Returns the depreciation
  *            of an asset for a specified period using the
  *            fixed-declining balance method.
  *
  * USAGE:     db = db_slk(cost,salvage,life,period,month);
  *               cost - initial cost of the asset.
  *               salvage - the value at the end of the depreciation
  *                  (sometimes called the salvage value of the asset).
  *               life - number of periods over which the asset
  *                  is being depreciated (sometimes called the
  *                  useful life of the asset).
  *               period - the period.
  *               month - number of months in the first year.
  *                       If month is omitted, it is assumed to be 12.
  *
  *--------------------------------------------------------------------*/"
F.FINANCE.DB_SLK,CMP,631.0,Statement Source,Executable,IF,0.0,2.0,,if month eq . then
F.FINANCE.DB_SLK,CMP,632.0,Statement Source,Executable,ASSIGN,0.0,1.0,,month = 12;
F.FINANCE.DB_SLK,CMP,633.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.DB_SLK,CMP,634.0,Statement Source,Executable,IF,0.0,2.0,,if month > 12 | month < 1 then
F.FINANCE.DB_SLK,CMP,635.0,Statement Source,Executable,ASSIGN,0.0,1.0,,month = 12;
F.FINANCE.DB_SLK,CMP,636.0,Statement Source,Executable,ASSIGN,0.0,1.0,,rate = 1 - (salvage/cost)**(1/life);
F.FINANCE.DB_SLK,CMP,637.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"rate = round(rate, 0.001);"
F.FINANCE.DB_SLK,CMP,638.0,Statement Source,Executable,ASSIGN,0.0,1.0,,db1 = cost*rate*month/12;
F.FINANCE.DB_SLK,CMP,639.0,Statement Source,Executable,IF,0.0,2.0,,if period = 1 then
F.FINANCE.DB_SLK,CMP,640.0,Statement Source,Executable,RETURN,0.0,1.0,,return(db1);
F.FINANCE.DB_SLK,CMP,641.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cost = cost - db1;
F.FINANCE.DB_SLK,CMP,642.0,Statement Source,Executable,ASSIGN,0.0,1.0,,db2 = cost*rate;
F.FINANCE.DB_SLK,CMP,643.0,Statement Source,Executable,IF,0.0,2.0,,if period = 2 then
F.FINANCE.DB_SLK,CMP,644.0,Statement Source,Executable,RETURN,0.0,1.0,,return(db2);
F.FINANCE.DB_SLK,CMP,645.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cost = cost - db2;
F.FINANCE.DB_SLK,CMP,646.0,Statement Source,Executable,IF,0.0,2.0,,if period > 2 & period <= life then
F.FINANCE.DB_SLK,CMP,647.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.DB_SLK,CMP,648.0,Statement Source,Executable,DO,0.0,3.0,,do i = 2 to period - 1;
F.FINANCE.DB_SLK,CMP,649.0,Statement Source,Executable,ASSIGN,0.0,1.0,,dbtemp = cost*rate;
F.FINANCE.DB_SLK,CMP,650.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cost = cost - dbtemp;
F.FINANCE.DB_SLK,CMP,651.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.DB_SLK,CMP,652.0,Statement Source,Executable,ASSIGN,0.0,1.0,,db = dbtemp;
F.FINANCE.DB_SLK,CMP,653.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.DB_SLK,CMP,654.0,Statement Source,Executable,IF,0.0,2.0,,if period > 2 & period = life + 1 then
F.FINANCE.DB_SLK,CMP,655.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.DB_SLK,CMP,656.0,Statement Source,Executable,DO,0.0,3.0,,do i = 2 to period - 2;
F.FINANCE.DB_SLK,CMP,657.0,Statement Source,Executable,ASSIGN,0.0,1.0,,dbtemp = cost*rate;
F.FINANCE.DB_SLK,CMP,658.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cost = cost - dbtemp;
F.FINANCE.DB_SLK,CMP,659.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.DB_SLK,CMP,660.0,Statement Source,Executable,ASSIGN,0.0,1.0,,db = cost*rate*(12 - month)/12;
F.FINANCE.DB_SLK,CMP,661.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.DB_SLK,CMP,662.0,Statement Source,Executable,RETURN,0.0,1.0,,return(db);
F.FINANCE.DB_SLK,CMP,663.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.COUPDAYS_SLK,CMP,664.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[coupdays_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel COUPDAYS]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S"
F.FINANCE.COUPDAYS_SLK,CMP,665.0,Prototype,FCmp,finance,2.0,,,"n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.COUPDAYS_SLK,CMP,666.0,Header,Function,Excel COUPDAYS,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.392</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel COUPDAYS]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.COUPDAYS_SLK,CMP,667.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function coupdays_slk( settlement, maturity, freq, basis ) label= ""Excel COUPDAYS"";"
F.FINANCE.COUPDAYS_SLK,CMP,668.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     coupdays_slk
  *
  * PURPOSE:   Microsoft Excel's COUPDAYS function.  Returns the number
  *            of days in the coupon period that contains the
  *            settlement date.
  *
  * USAGE:     coupdays = coupdays_slk(settlement,maturity,freq,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *                   freq"
F.FINANCE.COUPDAYS_SLK,CMP,669.0,Statement Source,Comment,CMT,1.0,101.0,,"= 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *
  * NOTES:  This function is not consistent in how it obtains the next
  *         coupon date after settlement, and/or the previous coupon
  *         date before settlement. In the COUPPCD and COUPNCD functions,
  *         when the maturity is on the last day of a month, then the
  *         coupon date will also fall on the last day of the coupon
  *         payment month, even though they may not be the same calendar
  *         day. However, when the COUPDAYS function sometimes violates
  *         this rule:
  *
  *      1. If maturity is on the last day of a February in a leap year,
  *         and settlement is on the last day of a month:
  *
  *         when freq = 1, use the same rul"
F.FINANCE.COUPDAYS_SLK,CMP,670.0,Statement Source,Comment,CMT,1.0,101.0,,"e as COUPPCD and
  *         COUPNCD if settlement is in any month other than
  *         January; else use same calendar day in the coupon payment.
  *
  *         when freq = 2, use the same rule as COUPPCD and COUPNCD
  *         if settlement is in a month that is later than
  *         July; else use the same calendar day in the coupon payment.
  *
  *         when freq = 4, use the same rule as COUPPCD and COUPNCD
  *         if settlement is in November and December; else
  *         use the same calendar day as maturity.
  *
  *      2. If maturity is on the last day of a February in a year
  *         immediately before a leap year, and settlement
  *         is on the last day of a month, use the same rule as COUPPCD
  *         and COUPNCD only if settlement is in January;
  *         else use the same calendar day in the coupon payment.
  *
  *      3. If maturity is on the last day of February in a year that
  *         is neither a leap year nor a year immediately
  *         before a leap year,"
F.FINANCE.COUPDAYS_SLK,CMP,671.0,Statement Source,Comment,CMT,2.0,101.0,,"and settlement is on the last day of a
  *         month:
  *
  *         when freq = 1, always use the same rule as COUPPCD and
  *         COUPNCD.
  *
  *         when freq = 2, use the same rule as COUPPCD and COUPNCD
  *         if settlement is in January or August-December;
  *         else use the same calendar day.
  *
  *         when freq = 4, use the same rule as COUPPCD and COUPNCD
  *         if settlement is in January, November, or
  *         December; else use the same calendar day.
  *
  *---------------------------------------------------------------------*/"
F.FINANCE.COUPDAYS_SLK,CMP,672.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"n = coupnum_slk(settlement,maturity,freq,basis);"
F.FINANCE.COUPDAYS_SLK,CMP,673.0,Statement Source,Executable,ASSIGN,0.0,1.0,,matday = day(maturity);
F.FINANCE.COUPDAYS_SLK,CMP,674.0,Statement Source,Executable,ASSIGN,0.0,1.0,,matmonth = month(maturity);
F.FINANCE.COUPDAYS_SLK,CMP,675.0,Statement Source,Executable,ASSIGN,0.0,1.0,,matyear = year(maturity);
F.FINANCE.COUPDAYS_SLK,CMP,676.0,Statement Source,Executable,SELECT,0.0,15.0,,select(freq);
F.FINANCE.COUPDAYS_SLK,CMP,677.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.COUPDAYS_SLK,CMP,678.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,679.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - n;
F.FINANCE.COUPDAYS_SLK,CMP,680.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - (n - 1);
F.FINANCE.COUPDAYS_SLK,CMP,681.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = matmonth;
F.FINANCE.COUPDAYS_SLK,CMP,682.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = matmonth;
F.FINANCE.COUPDAYS_SLK,CMP,683.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,684.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPDAYS_SLK,CMP,685.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,686.0,Statement Source,Executable,IF,0.0,2.0,,if int(n/2) = n/2 then
F.FINANCE.COUPDAYS_SLK,CMP,687.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,688.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - n/2;
F.FINANCE.COUPDAYS_SLK,CMP,689.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = matmonth;
F.FINANCE.COUPDAYS_SLK,CMP,690.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth < 7 then
F.FINANCE.COUPDAYS_SLK,CMP,691.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,692.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - n/2;
F.FINANCE.COUPDAYS_SLK,CMP,693.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = matmonth + 6;
F.FINANCE.COUPDAYS_SLK,CMP,694.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,695.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,696.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,697.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - (n/2 - 1);
F.FINANCE.COUPDAYS_SLK,CMP,698.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = matmonth - 6;
F.FINANCE.COUPDAYS_SLK,CMP,699.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,700.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,701.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,702.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,703.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - int(n/2);
F.FINANCE.COUPDAYS_SLK,CMP,704.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = matmonth;
F.FINANCE.COUPDAYS_SLK,CMP,705.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth < 7 then
F.FINANCE.COUPDAYS_SLK,CMP,706.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,707.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - (n + 1)/2;
F.FINANCE.COUPDAYS_SLK,CMP,708.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = matmonth + 6;
F.FINANCE.COUPDAYS_SLK,CMP,709.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,710.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,711.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,712.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - (n - 1)/2;
F.FINANCE.COUPDAYS_SLK,CMP,713.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = matmonth - 6;
F.FINANCE.COUPDAYS_SLK,CMP,714.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,715.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,716.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,717.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.COUPDAYS_SLK,CMP,718.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,719.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 12 and matmonth > 9 then
F.FINANCE.COUPDAYS_SLK,CMP,720.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,721.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - int(n/4);
F.FINANCE.COUPDAYS_SLK,CMP,722.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = matmonth - (n - int(n/4)*4)*3;
F.FINANCE.COUPDAYS_SLK,CMP,723.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - int((n - 1)/4);
F.FINANCE.COUPDAYS_SLK,CMP,724.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = matmonth - ((n - 1) - int((n - 1)/4)*4)*3;
F.FINANCE.COUPDAYS_SLK,CMP,725.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,726.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,727.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 9 and matmonth > 6 then
F.FINANCE.COUPDAYS_SLK,CMP,728.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,729.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - int((n + 1)/4);
F.FINANCE.COUPDAYS_SLK,CMP,730.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = (matmonth + 3) - ((n + 1) - int((n + 1)/4)*4)*3;
F.FINANCE.COUPDAYS_SLK,CMP,731.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - int(n/4);
F.FINANCE.COUPDAYS_SLK,CMP,732.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = (matmonth + 3) - (n - int(n /4)*4)*3;
F.FINANCE.COUPDAYS_SLK,CMP,733.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,734.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,735.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 6 and matmonth > 3 then
F.FINANCE.COUPDAYS_SLK,CMP,736.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,737.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - int((n+2)/4);
F.FINANCE.COUPDAYS_SLK,CMP,738.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = (matmonth + 6) - ((n + 2) - int((n + 2)/4)*4)*3;
F.FINANCE.COUPDAYS_SLK,CMP,739.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - int((n+1)/4);
F.FINANCE.COUPDAYS_SLK,CMP,740.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = (matmonth + 6) - ((n + 1) - int((n + 1)/4)*4)*3;
F.FINANCE.COUPDAYS_SLK,CMP,741.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,742.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,743.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 3 and matmonth > 0 then
F.FINANCE.COUPDAYS_SLK,CMP,744.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,745.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - int((n+3)/4);
F.FINANCE.COUPDAYS_SLK,CMP,746.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = (matmonth + 9) - ((n + 3) - int((n + 3)/4)*4)*3;
F.FINANCE.COUPDAYS_SLK,CMP,747.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - int((n+2)/4);
F.FINANCE.COUPDAYS_SLK,CMP,748.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = (matmonth + 9) - ((n + 2) - int((n + 2)/4)*4)*3;
F.FINANCE.COUPDAYS_SLK,CMP,749.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,750.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,751.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPDAYS_SLK,CMP,752.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.COUPDAYS_SLK,CMP,753.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,754.0,Statement Source,Comment,CMT,0.0,101.0,,/* Does Febuary have 28 or 29 days in the year of the next coupon date? */
F.FINANCE.COUPDAYS_SLK,CMP,755.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febstart = mdy(2,1,cpendyear);"
F.FINANCE.COUPDAYS_SLK,CMP,756.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marstart = mdy(3,1,cpendyear);"
F.FINANCE.COUPDAYS_SLK,CMP,757.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febncd = datdif(febstart,marstart,'act/act');"
F.FINANCE.COUPDAYS_SLK,CMP,758.0,Statement Source,Comment,CMT,0.0,101.0,,"/* adjust the case when maturity month has more days than the month
        of next coupon date and maturity day is on the date that is beyond
        the last day of the month of next coupon date */"
F.FINANCE.COUPDAYS_SLK,CMP,759.0,Statement Source,Executable,SELECT,0.0,15.0,,select(cpendmon);
F.FINANCE.COUPDAYS_SLK,CMP,760.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPDAYS_SLK,CMP,761.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,762.0,Statement Source,Executable,IF,0.0,2.0,,if febncd eq 28 & matday > 28 then
F.FINANCE.COUPDAYS_SLK,CMP,763.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = 28;
F.FINANCE.COUPDAYS_SLK,CMP,764.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,765.0,Statement Source,Executable,IF,0.0,2.0,,if febncd eq 29 & matday > 29 then
F.FINANCE.COUPDAYS_SLK,CMP,766.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = 29;
F.FINANCE.COUPDAYS_SLK,CMP,767.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,768.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = matday;
F.FINANCE.COUPDAYS_SLK,CMP,769.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,770.0,Statement Source,Executable,WHEN,0.0,16.0,,"when(4,6,9,11)"
F.FINANCE.COUPDAYS_SLK,CMP,771.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,772.0,Statement Source,Executable,IF,0.0,2.0,,if matday > 30 then
F.FINANCE.COUPDAYS_SLK,CMP,773.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = 30;
F.FINANCE.COUPDAYS_SLK,CMP,774.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,775.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = matday;
F.FINANCE.COUPDAYS_SLK,CMP,776.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,777.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPDAYS_SLK,CMP,778.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = matday;
F.FINANCE.COUPDAYS_SLK,CMP,779.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,780.0,Statement Source,Comment,CMT,0.0,101.0,,"/* check if Febuary has 28 or 29 days in the year of the coupon date
        before settlement date */"
F.FINANCE.COUPDAYS_SLK,CMP,781.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febstart = mdy(2,1,cpstartyear);"
F.FINANCE.COUPDAYS_SLK,CMP,782.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marstart = mdy(3,1,cpstartyear);"
F.FINANCE.COUPDAYS_SLK,CMP,783.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"feblength = datdif(febstart,marstart,'act/act');"
F.FINANCE.COUPDAYS_SLK,CMP,784.0,Statement Source,Executable,SELECT,0.0,15.0,,select(cpstartmon);
F.FINANCE.COUPDAYS_SLK,CMP,785.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPDAYS_SLK,CMP,786.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,787.0,Statement Source,Executable,IF,0.0,2.0,,if feblength eq 28 & matday > 28 then
F.FINANCE.COUPDAYS_SLK,CMP,788.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = 28;
F.FINANCE.COUPDAYS_SLK,CMP,789.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,790.0,Statement Source,Executable,IF,0.0,2.0,,if feblength eq 29 & matday > 29 then
F.FINANCE.COUPDAYS_SLK,CMP,791.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = 29;
F.FINANCE.COUPDAYS_SLK,CMP,792.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,793.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = matday;
F.FINANCE.COUPDAYS_SLK,CMP,794.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,795.0,Statement Source,Executable,WHEN,0.0,16.0,,"when(4,6,9,11)"
F.FINANCE.COUPDAYS_SLK,CMP,796.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,797.0,Statement Source,Executable,IF,0.0,2.0,,if matday > 30 then
F.FINANCE.COUPDAYS_SLK,CMP,798.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = 30;
F.FINANCE.COUPDAYS_SLK,CMP,799.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,800.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = matday;
F.FINANCE.COUPDAYS_SLK,CMP,801.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,802.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPDAYS_SLK,CMP,803.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = matday;
F.FINANCE.COUPDAYS_SLK,CMP,804.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,805.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"ncd = coupncd_slk(settlement, maturity, freq, basis);"
F.FINANCE.COUPDAYS_SLK,CMP,806.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"pcd = couppcd_slk(settlement, maturity, freq, basis);"
F.FINANCE.COUPDAYS_SLK,CMP,807.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febmat = mdy(2,1,matyear);"
F.FINANCE.COUPDAYS_SLK,CMP,808.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marmat = mdy(3,1,matyear);"
F.FINANCE.COUPDAYS_SLK,CMP,809.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"feblgthmat = datdif(febmat,marmat,'act/act');"
F.FINANCE.COUPDAYS_SLK,CMP,810.0,Statement Source,Comment,CMT,0.0,101.0,,/* check if settlement is on the last day of the month */
F.FINANCE.COUPDAYS_SLK,CMP,811.0,Statement Source,Executable,ASSIGN,0.0,1.0,,setyear = year(settlement);
F.FINANCE.COUPDAYS_SLK,CMP,812.0,Statement Source,Executable,ASSIGN,0.0,1.0,,setmon = month(settlement);
F.FINANCE.COUPDAYS_SLK,CMP,813.0,Statement Source,Executable,ASSIGN,0.0,1.0,,setday = day(settlement);
F.FINANCE.COUPDAYS_SLK,CMP,814.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"setstart = mdy(setmon,1,setyear);"
F.FINANCE.COUPDAYS_SLK,CMP,815.0,Statement Source,Executable,IF,0.0,2.0,,if setmon = 12 then
F.FINANCE.COUPDAYS_SLK,CMP,816.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"setend = mdy(1,1,setyear + 1);"
F.FINANCE.COUPDAYS_SLK,CMP,817.0,Statement Source,Executable,IF,0.0,2.0,,if setmon ~= 12 then
F.FINANCE.COUPDAYS_SLK,CMP,818.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"setend = mdy(setmon+1, 1, setyear);"
F.FINANCE.COUPDAYS_SLK,CMP,819.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"setmonlgth = datdif(setstart, setend, 'act/act');"
F.FINANCE.COUPDAYS_SLK,CMP,820.0,Statement Source,Comment,CMT,0.0,101.0,,"/* check if settlement is the last day of a month in a leap year,
        one year prior to a leap year, or other years, these cases are
        somehow treated differently in EXCEL if the maturity is on the
        last day of a February */"
F.FINANCE.COUPDAYS_SLK,CMP,821.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febset = mdy(2,1,setyear);"
F.FINANCE.COUPDAYS_SLK,CMP,822.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marset = mdy(3,1,setyear);"
F.FINANCE.COUPDAYS_SLK,CMP,823.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"feblgthset = datdif(febset, marset, 'act/act');"
F.FINANCE.COUPDAYS_SLK,CMP,824.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febsetb = mdy(2,1,setyear + 1 );"
F.FINANCE.COUPDAYS_SLK,CMP,825.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marsetb = mdy(3,1,setyear + 1 );"
F.FINANCE.COUPDAYS_SLK,CMP,826.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"feblgthsetb = datdif(febsetb, marsetb, 'act/act');"
F.FINANCE.COUPDAYS_SLK,CMP,827.0,Statement Source,Executable,IF,0.0,2.0,,if n = 2 & matmonth = 11 & matday = 30 then
F.FINANCE.COUPDAYS_SLK,CMP,828.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,829.0,Statement Source,Comment,CMT,0.0,101.0,,/* implement later */
F.FINANCE.COUPDAYS_SLK,CMP,830.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,831.0,Statement Source,Executable,SELECT,0.0,15.0,,select(freq);
F.FINANCE.COUPDAYS_SLK,CMP,832.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.COUPDAYS_SLK,CMP,833.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,834.0,Statement Source,Executable,IF,0.0,2.0,,if feblgthset = 29 & matmonth = 2 & feblgthmat = 28 & matday = feblgthmat & setday = setmonlgth & setmon = 1 | feblgthsetb = 29 & matmonth = 2 & matday = feblgthmat & setday = setmonlgth & setmon > 1 then
F.FINANCE.COUPDAYS_SLK,CMP,835.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,836.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"cpstartdate = mdy(cpstartmon, cpstartday, cpstartyear);"
F.FINANCE.COUPDAYS_SLK,CMP,837.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"cpenddate = mdy(cpendmon, cpendday, cpendyear);"
F.FINANCE.COUPDAYS_SLK,CMP,838.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,839.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,840.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,841.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartdate = pcd;
F.FINANCE.COUPDAYS_SLK,CMP,842.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpenddate = ncd;
F.FINANCE.COUPDAYS_SLK,CMP,843.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,844.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,845.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPDAYS_SLK,CMP,846.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,847.0,Statement Source,Executable,IF,0.0,2.0,,if feblgthset = 29 & matmonth = 2 & feblgthmat = 28 & matday = feblgthmat & setday = setmonlgth & setmon <= 7 | feblgthsetb = 29 & matmonth = 2 & matday = feblgthmat & setday = setmonlgth & setmon > 1 | feblgthset = 28 & feblgthsetb = 28 & matmonth = 2 & matday = feblgthmat & setday = setmonlgth & setmon > 1 & setmon < 8 then
F.FINANCE.COUPDAYS_SLK,CMP,848.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,849.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"cpstartdate = mdy(cpstartmon, cpstartday, cpstartyear);"
F.FINANCE.COUPDAYS_SLK,CMP,850.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"cpenddate = mdy(cpendmon, cpendday, cpendyear);"
F.FINANCE.COUPDAYS_SLK,CMP,851.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,852.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,853.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,854.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartdate = pcd;
F.FINANCE.COUPDAYS_SLK,CMP,855.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpenddate = ncd;
F.FINANCE.COUPDAYS_SLK,CMP,856.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,857.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,858.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.COUPDAYS_SLK,CMP,859.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,860.0,Statement Source,Executable,IF,0.0,2.0,,if feblgthset = 29 & matmonth = 2 & matday = feblgthmat & setday = setmonlgth & setmon < 11 | feblgthsetb = 29 & matmonth = 2 & matday = feblgthmat & setday = setmonlgth & setmon > 1 | feblgthset = 28 & feblgthsetb = 28 & matmonth = 2 & matday = feblgthmat & setday = setmonlgth & setmon > 1 & setmon < 11 then
F.FINANCE.COUPDAYS_SLK,CMP,861.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,862.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"cpstartdate = mdy(cpstartmon, cpstartday, cpstartyear);"
F.FINANCE.COUPDAYS_SLK,CMP,863.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"cpenddate = mdy(cpendmon, cpendday, cpendyear);"
F.FINANCE.COUPDAYS_SLK,CMP,864.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,865.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPDAYS_SLK,CMP,866.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,867.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartdate = pcd;
F.FINANCE.COUPDAYS_SLK,CMP,868.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpenddate = ncd;
F.FINANCE.COUPDAYS_SLK,CMP,869.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,870.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,871.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPDAYS_SLK,CMP,872.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPDAYS_SLK,CMP,873.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,874.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.COUPDAYS_SLK,CMP,875.0,Statement Source,Executable,WHEN,0.0,16.0,,"when(0,2,4)"
F.FINANCE.COUPDAYS_SLK,CMP,876.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,877.0,Statement Source,Executable,SELECT,0.0,15.0,,select(freq);
F.FINANCE.COUPDAYS_SLK,CMP,878.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.COUPDAYS_SLK,CMP,879.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupdays = 360;
F.FINANCE.COUPDAYS_SLK,CMP,880.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPDAYS_SLK,CMP,881.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupdays = 180;
F.FINANCE.COUPDAYS_SLK,CMP,882.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.COUPDAYS_SLK,CMP,883.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupdays = 90;
F.FINANCE.COUPDAYS_SLK,CMP,884.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPDAYS_SLK,CMP,885.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPDAYS_SLK,CMP,886.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,887.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,888.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.COUPDAYS_SLK,CMP,889.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,890.0,Statement Source,Executable,SELECT,0.0,15.0,,select(freq);
F.FINANCE.COUPDAYS_SLK,CMP,891.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.COUPDAYS_SLK,CMP,892.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupdays = 365;
F.FINANCE.COUPDAYS_SLK,CMP,893.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPDAYS_SLK,CMP,894.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupdays = 182.5;
F.FINANCE.COUPDAYS_SLK,CMP,895.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.COUPDAYS_SLK,CMP,896.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupdays = 91.25;
F.FINANCE.COUPDAYS_SLK,CMP,897.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPDAYS_SLK,CMP,898.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPDAYS_SLK,CMP,899.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,900.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,901.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.COUPDAYS_SLK,CMP,902.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPDAYS_SLK,CMP,903.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupdays = datdif(cpstartdate,cpenddate,'act/act');"
F.FINANCE.COUPDAYS_SLK,CMP,904.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,905.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPDAYS_SLK,CMP,906.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.COUPDAYS_SLK,CMP,907.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYS_SLK,CMP,908.0,Statement Source,Executable,RETURN,0.0,1.0,,return(coupdays);
F.FINANCE.COUPDAYS_SLK,CMP,909.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.COUPPCD_SLK,CMP,910.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[couppcd_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel COUPPCD]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S"
F.FINANCE.COUPPCD_SLK,CMP,911.0,Prototype,FCmp,finance,2.0,,,"n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.COUPPCD_SLK,CMP,912.0,Header,Function,Excel COUPPCD,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.398</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel COUPPCD]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.COUPPCD_SLK,CMP,913.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function couppcd_slk( settlement, maturity, freq, basis ) label= ""Excel COUPPCD"";"
F.FINANCE.COUPPCD_SLK,CMP,914.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     couppcd_slk
  *
  * PURPOSE:   Microsoft Excel's COUPPCD function. Returns the previous
  *            coupon date before the settlement date.
  *
  * USAGE:     couppcd = couppcd_slk(settlement,maturity,freq,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *                   freq = 4: quarterly payments.
  *"
F.FINANCE.COUPPCD_SLK,CMP,915.0,Statement Source,Comment,CMT,1.0,101.0,,"basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *
  * NOTES:   The coupon dates are obtained in a backward fashion from
  *          the maturity date toward settlement.
  *
  *          In general, the coupon dates are on the same calendar day
  *          as the maturity date.
  *
  *          If maturity month has more days than the month of the
  *          obtained previous coupon payment month, and
  *          maturity day is on a day that is larger than the last day
  *          of the obtained previous coupon payment month,
  *          then set the previous coupon payment day to be the last
  *          day of that month.
  *
  *          If maturity month has fewer days than the month of the
  *          obtained previous coupon payment, and maturity day
  *          is on"
F.FINANCE.COUPPCD_SLK,CMP,916.0,Statement Source,Comment,CMT,2.0,101.0,,"the last day of maturity month, then set the previous
  *          coupon payment day to be the last day of that month.
  *
  *          If the coupon date falls on the settlement date, this
  *          function will display the settlement date.
  *
  *--------------------------------------------------------------------*/"
F.FINANCE.COUPPCD_SLK,CMP,917.0,Statement Source,Executable,IF,0.0,2.0,,if settlement >= maturity then
F.FINANCE.COUPPCD_SLK,CMP,918.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPPCD_SLK,CMP,919.0,Statement Source,Executable,IF,0.0,2.0,,if freq ~= 1 & freq ~= 2 & freq ~= 4 then
F.FINANCE.COUPPCD_SLK,CMP,920.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPPCD_SLK,CMP,921.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.COUPPCD_SLK,CMP,922.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPPCD_SLK,CMP,923.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"n = coupnum_slk(settlement,maturity,freq,basis);"
F.FINANCE.COUPPCD_SLK,CMP,924.0,Statement Source,Executable,ASSIGN,0.0,1.0,,matday = day(maturity);
F.FINANCE.COUPPCD_SLK,CMP,925.0,Statement Source,Executable,ASSIGN,0.0,1.0,,matmonth = month(maturity);
F.FINANCE.COUPPCD_SLK,CMP,926.0,Statement Source,Executable,ASSIGN,0.0,1.0,,matyear = year(maturity);
F.FINANCE.COUPPCD_SLK,CMP,927.0,Statement Source,Executable,SELECT,0.0,15.0,,select(freq);
F.FINANCE.COUPPCD_SLK,CMP,928.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.COUPPCD_SLK,CMP,929.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,930.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - n;
F.FINANCE.COUPPCD_SLK,CMP,931.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = matmonth;
F.FINANCE.COUPPCD_SLK,CMP,932.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,933.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPPCD_SLK,CMP,934.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,935.0,Statement Source,Executable,IF,0.0,2.0,,if int(n/2) = n/2 then
F.FINANCE.COUPPCD_SLK,CMP,936.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,937.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - n/2;
F.FINANCE.COUPPCD_SLK,CMP,938.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = matmonth;
F.FINANCE.COUPPCD_SLK,CMP,939.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,940.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPPCD_SLK,CMP,941.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,942.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth < 7 then
F.FINANCE.COUPPCD_SLK,CMP,943.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,944.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - (n + 1)/2;
F.FINANCE.COUPPCD_SLK,CMP,945.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = matmonth + 6;
F.FINANCE.COUPPCD_SLK,CMP,946.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,947.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPPCD_SLK,CMP,948.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,949.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - (n - 1)/2;
F.FINANCE.COUPPCD_SLK,CMP,950.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = matmonth - 6;
F.FINANCE.COUPPCD_SLK,CMP,951.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,952.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,953.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,954.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.COUPPCD_SLK,CMP,955.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,956.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 12 and matmonth > 9 then
F.FINANCE.COUPPCD_SLK,CMP,957.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,958.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - int(n/4);
F.FINANCE.COUPPCD_SLK,CMP,959.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = matmonth - (n - int(n/4)*4)*3;
F.FINANCE.COUPPCD_SLK,CMP,960.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,961.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPPCD_SLK,CMP,962.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 9 and matmonth > 6 then
F.FINANCE.COUPPCD_SLK,CMP,963.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,964.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - int((n + 1)/4);
F.FINANCE.COUPPCD_SLK,CMP,965.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = (matmonth + 3) - ((n + 1) - int((n + 1)/4)*4)*3;
F.FINANCE.COUPPCD_SLK,CMP,966.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,967.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPPCD_SLK,CMP,968.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 6 and matmonth > 3 then
F.FINANCE.COUPPCD_SLK,CMP,969.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,970.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - int((n+2)/4);
F.FINANCE.COUPPCD_SLK,CMP,971.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = (matmonth + 6) - ((n + 2) - int((n + 2)/4)*4)*3;
F.FINANCE.COUPPCD_SLK,CMP,972.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,973.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPPCD_SLK,CMP,974.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 3 and matmonth > 0 then
F.FINANCE.COUPPCD_SLK,CMP,975.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,976.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartyear = matyear - int((n+3)/4);
F.FINANCE.COUPPCD_SLK,CMP,977.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartmon = (matmonth + 9) - ((n + 3) - int((n + 3)/4)*4)*3;
F.FINANCE.COUPPCD_SLK,CMP,978.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,979.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,980.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPPCD_SLK,CMP,981.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.COUPPCD_SLK,CMP,982.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,983.0,Statement Source,Comment,CMT,0.0,101.0,,"/* check if Febuary has 28 or 29 days in the year of the coupon date
        before settlement date */"
F.FINANCE.COUPPCD_SLK,CMP,984.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febstart = mdy(2,1,cpstartyear);"
F.FINANCE.COUPPCD_SLK,CMP,985.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marstart = mdy(3,1,cpstartyear);"
F.FINANCE.COUPPCD_SLK,CMP,986.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"feblength = datdif(febstart,marstart,'act/act');"
F.FINANCE.COUPPCD_SLK,CMP,987.0,Statement Source,Executable,SELECT,0.0,15.0,,select(cpstartmon);
F.FINANCE.COUPPCD_SLK,CMP,988.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPPCD_SLK,CMP,989.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,990.0,Statement Source,Executable,IF,0.0,2.0,,if feblength eq 28 & matday > 28 then
F.FINANCE.COUPPCD_SLK,CMP,991.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = 28;
F.FINANCE.COUPPCD_SLK,CMP,992.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPPCD_SLK,CMP,993.0,Statement Source,Executable,IF,0.0,2.0,,if feblength eq 29 & matday > 29 then
F.FINANCE.COUPPCD_SLK,CMP,994.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = 29;
F.FINANCE.COUPPCD_SLK,CMP,995.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPPCD_SLK,CMP,996.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = matday;
F.FINANCE.COUPPCD_SLK,CMP,997.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,998.0,Statement Source,Executable,WHEN,0.0,16.0,,"when(4,6,9,11)"
F.FINANCE.COUPPCD_SLK,CMP,999.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,1000.0,Statement Source,Executable,IF,0.0,2.0,,if matday > 30 then
F.FINANCE.COUPPCD_SLK,CMP,1001.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = 30;
F.FINANCE.COUPPCD_SLK,CMP,1002.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPPCD_SLK,CMP,1003.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = matday;
F.FINANCE.COUPPCD_SLK,CMP,1004.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,1005.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPPCD_SLK,CMP,1006.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = matday;
F.FINANCE.COUPPCD_SLK,CMP,1007.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,1008.0,Statement Source,Comment,CMT,0.0,101.0,,/* check the number of days in the month of previous coupon date */
F.FINANCE.COUPPCD_SLK,CMP,1009.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"pcmstart = mdy(cpstartmon, 1, cpstartyear);"
F.FINANCE.COUPPCD_SLK,CMP,1010.0,Statement Source,Executable,IF,0.0,2.0,,if cpstartmon = 12 then
F.FINANCE.COUPPCD_SLK,CMP,1011.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"pcmend = mdy(1,1,cpstartyear + 1);"
F.FINANCE.COUPPCD_SLK,CMP,1012.0,Statement Source,Executable,IF,0.0,2.0,,if cpstartmon ~= 12 then
F.FINANCE.COUPPCD_SLK,CMP,1013.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"pcmend = mdy(cpstartmon + 1, 1, cpstartyear);"
F.FINANCE.COUPPCD_SLK,CMP,1014.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"pcmlength = datdif(pcmstart, pcmend, 'act/act');"
F.FINANCE.COUPPCD_SLK,CMP,1015.0,Statement Source,Comment,CMT,0.0,101.0,,"/* adjust the case when maturity month has fewer days than the
        month of previous coupon date and maturity day is the last day
        of the month. */"
F.FINANCE.COUPPCD_SLK,CMP,1016.0,Statement Source,Executable,SELECT,0.0,15.0,,select(matmonth);
F.FINANCE.COUPPCD_SLK,CMP,1017.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPPCD_SLK,CMP,1018.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,1019.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febstartm = mdy(2,1,matyear);"
F.FINANCE.COUPPCD_SLK,CMP,1020.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marstartm = mdy(3,1,matyear);"
F.FINANCE.COUPPCD_SLK,CMP,1021.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febmat = datdif(febstartm,marstartm,'act/act');"
F.FINANCE.COUPPCD_SLK,CMP,1022.0,Statement Source,Executable,IF,0.0,2.0,,if febmat = 28 & matday = 28 | febmat = 29 & matday = 29 then
F.FINANCE.COUPPCD_SLK,CMP,1023.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = pcmlength;
F.FINANCE.COUPPCD_SLK,CMP,1024.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,1025.0,Statement Source,Executable,WHEN,0.0,16.0,,"when(4,6,9,11)"
F.FINANCE.COUPPCD_SLK,CMP,1026.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPPCD_SLK,CMP,1027.0,Statement Source,Executable,IF,0.0,2.0,,if matday = 30 then
F.FINANCE.COUPPCD_SLK,CMP,1028.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpstartday = pcmlength;
F.FINANCE.COUPPCD_SLK,CMP,1029.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,1030.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPPCD_SLK,CMP,1031.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.COUPPCD_SLK,CMP,1032.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPPCD_SLK,CMP,1033.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"cpstartdate = mdy(cpstartmon, cpstartday, cpstartyear);"
F.FINANCE.COUPPCD_SLK,CMP,1034.0,Statement Source,Executable,RETURN,0.0,1.0,,return(cpstartdate);
F.FINANCE.COUPPCD_SLK,CMP,1035.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.COUPDAYSNC_SLK,CMP,1036.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[coupdaysnc_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel COUPDAYSNC]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]><"
F.FINANCE.COUPDAYSNC_SLK,CMP,1037.0,Prototype,FCmp,finance,2.0,,,"/S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.COUPDAYSNC_SLK,CMP,1038.0,Header,Function,Excel COUPDAYSNC,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.405</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel COUPDAYSNC]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.COUPDAYSNC_SLK,CMP,1039.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function coupdaysnc_slk( settlement, maturity, freq, basis ) label= ""Excel COUPDAYSNC"";"
F.FINANCE.COUPDAYSNC_SLK,CMP,1040.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     coupdaysnc_slknc
  *
  * PURPOSE:   Microsoft Excel's COUPDAYSNC function.  Returns the
  *            number of days from the settlement date to the next
  *            coupon date.
  *
  * USAGE:     coupdaysnc = coupdaysnc_slk( settlement, maturity,
  *                                         freq, basis );
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   maturity is the date when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   fr"
F.FINANCE.COUPDAYSNC_SLK,CMP,1041.0,Statement Source,Comment,CMT,2.0,101.0,,"eq = 2: semiannual payments.
  *                   freq = 4: quarterly payments.
  *               basis - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *--------------------------------------------------------------------*/"
F.FINANCE.COUPDAYSNC_SLK,CMP,1042.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.COUPDAYSNC_SLK,CMP,1043.0,Statement Source,Executable,RETURN,0.0,1.0,,return (.);
F.FINANCE.COUPDAYSNC_SLK,CMP,1044.0,Statement Source,Executable,IF,0.0,2.0,,if freq ~= 1 & freq ~= 2 & freq ~= 4 then
F.FINANCE.COUPDAYSNC_SLK,CMP,1045.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPDAYSNC_SLK,CMP,1046.0,Statement Source,Executable,IF,0.0,2.0,,if settlement >= maturity then
F.FINANCE.COUPDAYSNC_SLK,CMP,1047.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPDAYSNC_SLK,CMP,1048.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"ncd = coupncd_slk(settlement, maturity, freq, basis);"
F.FINANCE.COUPDAYSNC_SLK,CMP,1049.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.COUPDAYSNC_SLK,CMP,1050.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.COUPDAYSNC_SLK,CMP,1051.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupdaysnc = datdif(settlement,ncd,'30/360');"
F.FINANCE.COUPDAYSNC_SLK,CMP,1052.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.COUPDAYSNC_SLK,CMP,1053.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupdaysnc = datdif(settlement,ncd,'act/act');"
F.FINANCE.COUPDAYSNC_SLK,CMP,1054.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPDAYSNC_SLK,CMP,1055.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupdaysnc = datdif(settlement,ncd,'act/360');"
F.FINANCE.COUPDAYSNC_SLK,CMP,1056.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.COUPDAYSNC_SLK,CMP,1057.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupdaysnc = datdif(settlement,ncd,'act/365');"
F.FINANCE.COUPDAYSNC_SLK,CMP,1058.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.COUPDAYSNC_SLK,CMP,1059.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupdaysnc = datdif4_slk(settlement,ncd);"
F.FINANCE.COUPDAYSNC_SLK,CMP,1060.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPDAYSNC_SLK,CMP,1061.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPDAYSNC_SLK,CMP,1062.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPDAYSNC_SLK,CMP,1063.0,Statement Source,Executable,RETURN,0.0,1.0,,return(coupdaysnc);
F.FINANCE.COUPDAYSNC_SLK,CMP,1064.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.COUPNCD_SLK,CMP,1065.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[coupncd_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel COUPNCD]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S"
F.FINANCE.COUPNCD_SLK,CMP,1066.0,Prototype,FCmp,finance,2.0,,,"n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.COUPNCD_SLK,CMP,1067.0,Header,Function,Excel COUPNCD,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.406</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel COUPNCD]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.COUPNCD_SLK,CMP,1068.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function coupncd_slk( settlement, maturity, freq, basis ) label= ""Excel COUPNCD"";"
F.FINANCE.COUPNCD_SLK,CMP,1069.0,Statement Source,Comment,CMT,1.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     coupncd_slk
  *
  * PURPOSE:   Microsoft Excel's COUPNCD function. Returns the next
  *            coupon date after the settlement date.
  *
  * USAGE:     coupncd = coupncd_slk(settlement,maturity,freq,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd
  *               maturity - The security's maturity date. The
  *                   is the maturity te when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual payments.
  *                   freq = 4: quarterly payments.
  *               bas"
F.FINANCE.COUPNCD_SLK,CMP,1070.0,Statement Source,Comment,CMT,2.0,101.0,,"is - type of day count to use.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *--------------------------------------------------------------------*/"
F.FINANCE.COUPNCD_SLK,CMP,1071.0,Statement Source,Executable,IF,0.0,2.0,,if settlement >= maturity then
F.FINANCE.COUPNCD_SLK,CMP,1072.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPNCD_SLK,CMP,1073.0,Statement Source,Executable,IF,0.0,2.0,,if freq ~= 1 & freq ~= 2 & freq ~= 4 then
F.FINANCE.COUPNCD_SLK,CMP,1074.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.COUPNCD_SLK,CMP,1075.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"n = coupnum_slk(settlement,maturity,freq,basis);"
F.FINANCE.COUPNCD_SLK,CMP,1076.0,Statement Source,Executable,ASSIGN,0.0,1.0,,matday = day(maturity);
F.FINANCE.COUPNCD_SLK,CMP,1077.0,Statement Source,Executable,ASSIGN,0.0,1.0,,matmonth = month(maturity);
F.FINANCE.COUPNCD_SLK,CMP,1078.0,Statement Source,Executable,ASSIGN,0.0,1.0,,matyear = year(maturity);
F.FINANCE.COUPNCD_SLK,CMP,1079.0,Statement Source,Executable,SELECT,0.0,15.0,,select(freq);
F.FINANCE.COUPNCD_SLK,CMP,1080.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.COUPNCD_SLK,CMP,1081.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1082.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - (n - 1);
F.FINANCE.COUPNCD_SLK,CMP,1083.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = matmonth;
F.FINANCE.COUPNCD_SLK,CMP,1084.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1085.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPNCD_SLK,CMP,1086.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1087.0,Statement Source,Executable,IF,0.0,2.0,,if int(n/2) = n/2 then
F.FINANCE.COUPNCD_SLK,CMP,1088.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1089.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth < 7 then
F.FINANCE.COUPNCD_SLK,CMP,1090.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1091.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - n/2;
F.FINANCE.COUPNCD_SLK,CMP,1092.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = matmonth + 6;
F.FINANCE.COUPNCD_SLK,CMP,1093.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1094.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNCD_SLK,CMP,1095.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1096.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - (n/2 - 1);
F.FINANCE.COUPNCD_SLK,CMP,1097.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = matmonth - 6;
F.FINANCE.COUPNCD_SLK,CMP,1098.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1099.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1100.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNCD_SLK,CMP,1101.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1102.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - int(n/2);
F.FINANCE.COUPNCD_SLK,CMP,1103.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = matmonth;
F.FINANCE.COUPNCD_SLK,CMP,1104.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1105.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1106.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.COUPNCD_SLK,CMP,1107.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1108.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 12 and matmonth > 9 then
F.FINANCE.COUPNCD_SLK,CMP,1109.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1110.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - int((n - 1)/4 );
F.FINANCE.COUPNCD_SLK,CMP,1111.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = matmonth - ((n - 1) - int((n - 1)/4)*4)*3;
F.FINANCE.COUPNCD_SLK,CMP,1112.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1113.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNCD_SLK,CMP,1114.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 9 and matmonth > 6 then
F.FINANCE.COUPNCD_SLK,CMP,1115.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1116.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - int(n/4);
F.FINANCE.COUPNCD_SLK,CMP,1117.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = (matmonth + 3) - (n - int(n /4)*4)*3;
F.FINANCE.COUPNCD_SLK,CMP,1118.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1119.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNCD_SLK,CMP,1120.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 6 and matmonth > 3 then
F.FINANCE.COUPNCD_SLK,CMP,1121.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1122.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - int((n+1)/4);
F.FINANCE.COUPNCD_SLK,CMP,1123.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = (matmonth + 6) - ((n + 1) - int((n + 1)/4)*4)*3;
F.FINANCE.COUPNCD_SLK,CMP,1124.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1125.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNCD_SLK,CMP,1126.0,Statement Source,Executable,IF,0.0,2.0,,if matmonth <= 3 and matmonth > 0 then
F.FINANCE.COUPNCD_SLK,CMP,1127.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1128.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendyear = matyear - int((n+2)/4);
F.FINANCE.COUPNCD_SLK,CMP,1129.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendmon = (matmonth + 9) - ((n + 2) - int((n + 2)/4)*4)*3;
F.FINANCE.COUPNCD_SLK,CMP,1130.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1131.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1132.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPNCD_SLK,CMP,1133.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.COUPNCD_SLK,CMP,1134.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1135.0,Statement Source,Comment,CMT,0.0,101.0,,/*- check if Feb has 28 or 29 days in the year of the next coupon date -*/
F.FINANCE.COUPNCD_SLK,CMP,1136.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febstart = mdy(2,1,cpendyear);"
F.FINANCE.COUPNCD_SLK,CMP,1137.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marstart = mdy(3,1,cpendyear);"
F.FINANCE.COUPNCD_SLK,CMP,1138.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febncd = datdif(febstart,marstart,'act/act');"
F.FINANCE.COUPNCD_SLK,CMP,1139.0,Statement Source,Comment,CMT,0.0,101.0,,"/*- adjust case when maturity month has more days than the month
         of next coupon date and maturity day is on the date that is
         beyond the last day of the month of next coupon date -*/"
F.FINANCE.COUPNCD_SLK,CMP,1140.0,Statement Source,Executable,SELECT,0.0,15.0,,select(cpendmon);
F.FINANCE.COUPNCD_SLK,CMP,1141.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPNCD_SLK,CMP,1142.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1143.0,Statement Source,Executable,IF,0.0,2.0,,if febncd eq 28 & matday > 28 then
F.FINANCE.COUPNCD_SLK,CMP,1144.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = 28;
F.FINANCE.COUPNCD_SLK,CMP,1145.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNCD_SLK,CMP,1146.0,Statement Source,Executable,IF,0.0,2.0,,if febncd eq 29 & matday > 29 then
F.FINANCE.COUPNCD_SLK,CMP,1147.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = 29;
F.FINANCE.COUPNCD_SLK,CMP,1148.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNCD_SLK,CMP,1149.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = matday;
F.FINANCE.COUPNCD_SLK,CMP,1150.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1151.0,Statement Source,Executable,WHEN,0.0,16.0,,"when(4,6,9,11)"
F.FINANCE.COUPNCD_SLK,CMP,1152.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1153.0,Statement Source,Executable,IF,0.0,2.0,,if matday > 30 then
F.FINANCE.COUPNCD_SLK,CMP,1154.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = 30;
F.FINANCE.COUPNCD_SLK,CMP,1155.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNCD_SLK,CMP,1156.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = matday;
F.FINANCE.COUPNCD_SLK,CMP,1157.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1158.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPNCD_SLK,CMP,1159.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = matday;
F.FINANCE.COUPNCD_SLK,CMP,1160.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1161.0,Statement Source,Comment,CMT,0.0,101.0,,/*- check the number of days in the month of next coupon date -*/
F.FINANCE.COUPNCD_SLK,CMP,1162.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"ncmstart = mdy(cpendmon, 1, cpendyear);"
F.FINANCE.COUPNCD_SLK,CMP,1163.0,Statement Source,Executable,IF,0.0,2.0,,if cpendmon = 12 then
F.FINANCE.COUPNCD_SLK,CMP,1164.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"ncmend = mdy(1,1,cpendyear + 1);"
F.FINANCE.COUPNCD_SLK,CMP,1165.0,Statement Source,Executable,IF,0.0,2.0,,if cpendmon ~= 12 then
F.FINANCE.COUPNCD_SLK,CMP,1166.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"ncmend = mdy(cpendmon + 1, 1, cpendyear);"
F.FINANCE.COUPNCD_SLK,CMP,1167.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"ncmlength = datdif(ncmstart, ncmend, 'act/act');"
F.FINANCE.COUPNCD_SLK,CMP,1168.0,Statement Source,Comment,CMT,0.0,101.0,,"/*- adjust the case when maturity month has fewer days than
            the month of next coupon date and maturity day is the last
           day of the month. -*/"
F.FINANCE.COUPNCD_SLK,CMP,1169.0,Statement Source,Executable,SELECT,0.0,15.0,,select(matmonth);
F.FINANCE.COUPNCD_SLK,CMP,1170.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPNCD_SLK,CMP,1171.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1172.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febstartm = mdy(2,1,matyear);"
F.FINANCE.COUPNCD_SLK,CMP,1173.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marstartm = mdy(3,1,matyear);"
F.FINANCE.COUPNCD_SLK,CMP,1174.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febmat = datdif(febstartm,marstartm,'act/act');"
F.FINANCE.COUPNCD_SLK,CMP,1175.0,Statement Source,Executable,IF,0.0,2.0,,if febmat = 28 & matday = 28 | febmat = 29 & matday = 29 then
F.FINANCE.COUPNCD_SLK,CMP,1176.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = ncmlength;
F.FINANCE.COUPNCD_SLK,CMP,1177.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1178.0,Statement Source,Executable,WHEN,0.0,16.0,,"when(4,6,9,11)"
F.FINANCE.COUPNCD_SLK,CMP,1179.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNCD_SLK,CMP,1180.0,Statement Source,Executable,IF,0.0,2.0,,if matday = 30 then
F.FINANCE.COUPNCD_SLK,CMP,1181.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cpendday = ncmlength;
F.FINANCE.COUPNCD_SLK,CMP,1182.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1183.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPNCD_SLK,CMP,1184.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.COUPNCD_SLK,CMP,1185.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNCD_SLK,CMP,1186.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"cpenddate = mdy(cpendmon, cpendday, cpendyear);"
F.FINANCE.COUPNCD_SLK,CMP,1187.0,Statement Source,Executable,RETURN,0.0,1.0,,return(cpenddate);
F.FINANCE.COUPNCD_SLK,CMP,1188.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.COUPNUM_SLK,CMP,1189.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[coupnum_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel COUPNUM]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[freq]]></S><S n=""Kind""><![CDATA[v]]></S><S"
F.FINANCE.COUPNUM_SLK,CMP,1190.0,Prototype,FCmp,finance,2.0,,,"n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.COUPNUM_SLK,CMP,1191.0,Header,Function,Excel COUPNUM,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.411</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel COUPNUM]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.COUPNUM_SLK,CMP,1192.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function coupnum_slk( settlement, maturity, freq, basis ) label= ""Excel COUPNUM"";"
F.FINANCE.COUPNUM_SLK,CMP,1193.0,Statement Source,Comment,CMT,1.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     coupnum_slk
  *
  * PURPOSE:   Microsoft Excel's COUPNUM function.  Returns the number
  *            of coupons payable between the settlement date and
  *            date, maturity rounded up to the nearest whole coupon.
  *
  * USAGE:     coupnum = coupnum_slk( settlement, maturity, freq );
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               maturity - The security's maturity date. The
  *                   maturity is the date when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               freq - Number of coupon payments per year.
  *                   freq = 1: annual payments.
  *                   freq = 2: semiannual p"
F.FINANCE.COUPNUM_SLK,CMP,1194.0,Statement Source,Comment,CMT,2.0,101.0,,"ayments.
  *                   freq = 4: quarterly payments.
  *               basis - type of day count basis.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *-----------------------------------------------------------------*/"
F.FINANCE.COUPNUM_SLK,CMP,1195.0,Statement Source,Executable,IF,0.0,2.0,,if basis < 0 | basis > 4 then
F.FINANCE.COUPNUM_SLK,CMP,1196.0,Statement Source,Executable,ASSIGN,0.0,1.0,,_coupnum_slk_ = .;
F.FINANCE.COUPNUM_SLK,CMP,1197.0,Statement Source,Executable,IF,0.0,2.0,,if settlement >= maturity then
F.FINANCE.COUPNUM_SLK,CMP,1198.0,Statement Source,Executable,ASSIGN,0.0,1.0,,_coupnum_slk_ = .;
F.FINANCE.COUPNUM_SLK,CMP,1199.0,Statement Source,Executable,SELECT,0.0,15.0,,select(freq);
F.FINANCE.COUPNUM_SLK,CMP,1200.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.COUPNUM_SLK,CMP,1201.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupnum = intck('year',settlement,maturity) + 1;"
F.FINANCE.COUPNUM_SLK,CMP,1202.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPNUM_SLK,CMP,1203.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupnum = intck('semiyear',settlement,maturity) + 1;"
F.FINANCE.COUPNUM_SLK,CMP,1204.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.COUPNUM_SLK,CMP,1205.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"coupnum = intck('quarter',settlement,maturity) + 1;"
F.FINANCE.COUPNUM_SLK,CMP,1206.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPNUM_SLK,CMP,1207.0,Statement Source,Executable,ASSIGN,0.0,1.0,,_coupnum_slk_ = .;
F.FINANCE.COUPNUM_SLK,CMP,1208.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1209.0,Statement Source,Executable,ASSIGN,0.0,1.0,,years = year(settlement);
F.FINANCE.COUPNUM_SLK,CMP,1210.0,Statement Source,Executable,ASSIGN,0.0,1.0,,yearm = year(maturity);
F.FINANCE.COUPNUM_SLK,CMP,1211.0,Statement Source,Executable,ASSIGN,0.0,1.0,,months = month(settlement);
F.FINANCE.COUPNUM_SLK,CMP,1212.0,Statement Source,Executable,ASSIGN,0.0,1.0,,monthm = month(maturity);
F.FINANCE.COUPNUM_SLK,CMP,1213.0,Statement Source,Executable,ASSIGN,0.0,1.0,,days = day(settlement);
F.FINANCE.COUPNUM_SLK,CMP,1214.0,Statement Source,Executable,ASSIGN,0.0,1.0,,daym = day(maturity);
F.FINANCE.COUPNUM_SLK,CMP,1215.0,Statement Source,Executable,SELECT,0.0,15.0,,select(freq);
F.FINANCE.COUPNUM_SLK,CMP,1216.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.COUPNUM_SLK,CMP,1217.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1218.0,Statement Source,Executable,IF,0.0,2.0,,if months > monthm then
F.FINANCE.COUPNUM_SLK,CMP,1219.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum - 1;
F.FINANCE.COUPNUM_SLK,CMP,1220.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNUM_SLK,CMP,1221.0,Statement Source,Executable,IF,0.0,2.0,,if months = monthm then
F.FINANCE.COUPNUM_SLK,CMP,1222.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1223.0,Statement Source,Executable,IF,0.0,2.0,,if days = daym then
F.FINANCE.COUPNUM_SLK,CMP,1224.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum -1;
F.FINANCE.COUPNUM_SLK,CMP,1225.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1226.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1227.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.COUPNUM_SLK,CMP,1228.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1229.0,Statement Source,Executable,IF,0.0,2.0,,if days >= daym then
F.FINANCE.COUPNUM_SLK,CMP,1230.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1231.0,Statement Source,Executable,IF,0.0,2.0,,if months = 6 | months = 12 then
F.FINANCE.COUPNUM_SLK,CMP,1232.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum - 1;
F.FINANCE.COUPNUM_SLK,CMP,1233.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNUM_SLK,CMP,1234.0,Statement Source,Executable,IF,0.0,2.0,,if monthm < (1 + 6*int(monthm/6)) + (months - 6*int(months/6)) & monthm >= 1 + 6*int(monthm/6) then
F.FINANCE.COUPNUM_SLK,CMP,1235.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum - 1;
F.FINANCE.COUPNUM_SLK,CMP,1236.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1237.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNUM_SLK,CMP,1238.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1239.0,Statement Source,Executable,IF,0.0,2.0,,if months = 1 | months = 7 then
F.FINANCE.COUPNUM_SLK,CMP,1240.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum;
F.FINANCE.COUPNUM_SLK,CMP,1241.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNUM_SLK,CMP,1242.0,Statement Source,Executable,IF,0.0,2.0,,if months = 6 | months = 12 then
F.FINANCE.COUPNUM_SLK,CMP,1243.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1244.0,Statement Source,Executable,IF,0.0,2.0,,if monthm ~= 6 & monthm ~= 12 then
F.FINANCE.COUPNUM_SLK,CMP,1245.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum - 1;
F.FINANCE.COUPNUM_SLK,CMP,1246.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1247.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNUM_SLK,CMP,1248.0,Statement Source,Executable,IF,0.0,2.0,,if monthm < 6*int(monthm/6) + (months - 6*int(months/6)) & monthm >= 1 + 6*int(monthm/6) then
F.FINANCE.COUPNUM_SLK,CMP,1249.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum - 1;
F.FINANCE.COUPNUM_SLK,CMP,1250.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1251.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1252.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.COUPNUM_SLK,CMP,1253.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1254.0,Statement Source,Executable,IF,0.0,2.0,,if days >= daym then
F.FINANCE.COUPNUM_SLK,CMP,1255.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1256.0,Statement Source,Executable,IF,0.0,2.0,,if months = 3 | months = 6 | months = 9 | months = 12 then
F.FINANCE.COUPNUM_SLK,CMP,1257.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum - 1;
F.FINANCE.COUPNUM_SLK,CMP,1258.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNUM_SLK,CMP,1259.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1260.0,Statement Source,Executable,IF,0.0,2.0,,if monthm < (1 + 3*int(monthm/3)) + (months - 3*int(months/3)) & monthm >= 1 + 3*int(monthm/3) then
F.FINANCE.COUPNUM_SLK,CMP,1261.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum - 1;
F.FINANCE.COUPNUM_SLK,CMP,1262.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1263.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1264.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNUM_SLK,CMP,1265.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1266.0,Statement Source,Executable,IF,0.0,2.0,,if months = 1 | months = 4 | months = 7 | months = 10 then
F.FINANCE.COUPNUM_SLK,CMP,1267.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum;
F.FINANCE.COUPNUM_SLK,CMP,1268.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNUM_SLK,CMP,1269.0,Statement Source,Executable,IF,0.0,2.0,,if months = 3 | months = 6 | months = 9 | months = 12 then
F.FINANCE.COUPNUM_SLK,CMP,1270.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1271.0,Statement Source,Executable,IF,0.0,2.0,,if monthm = 3 | monthm = 6 | monthm = 9 | monthm = 12 then
F.FINANCE.COUPNUM_SLK,CMP,1272.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum;
F.FINANCE.COUPNUM_SLK,CMP,1273.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNUM_SLK,CMP,1274.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum - 1;
F.FINANCE.COUPNUM_SLK,CMP,1275.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1276.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.COUPNUM_SLK,CMP,1277.0,Statement Source,Executable,IF,0.0,2.0,,if months = 2 | months = 5 | months = 8 | months = 11 then
F.FINANCE.COUPNUM_SLK,CMP,1278.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.COUPNUM_SLK,CMP,1279.0,Statement Source,Executable,IF,0.0,2.0,,if monthm = 1 | monthm = 4 | monthm = 7 | monthm = 10 then
F.FINANCE.COUPNUM_SLK,CMP,1280.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum - 1;
F.FINANCE.COUPNUM_SLK,CMP,1281.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1282.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1283.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1284.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.COUPNUM_SLK,CMP,1285.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.COUPNUM_SLK,CMP,1286.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.COUPNUM_SLK,CMP,1287.0,Statement Source,Comment,CMT,0.0,101.0,,"/*- check if maturity is on the last day in February of a leap year,
         and settlement is on the last day in February of a nonleap year -*/"
F.FINANCE.COUPNUM_SLK,CMP,1288.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febmat = mdy(2,1,yearm);"
F.FINANCE.COUPNUM_SLK,CMP,1289.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marmat = mdy(3,1,yearm);"
F.FINANCE.COUPNUM_SLK,CMP,1290.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"feblgthmat = datdif(febmat,marmat, 'act/act');"
F.FINANCE.COUPNUM_SLK,CMP,1291.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febset = mdy(2,1,years);"
F.FINANCE.COUPNUM_SLK,CMP,1292.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marset = mdy(3,1,years);"
F.FINANCE.COUPNUM_SLK,CMP,1293.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"feblgthset = datdif(febset, marset, 'act/act');"
F.FINANCE.COUPNUM_SLK,CMP,1294.0,Statement Source,Executable,IF,0.0,2.0,,if feblgthmat = 29 & monthm = 2 & daym = feblgthmat & feblgthset = 28 & months = 2 & days = feblgthset then
F.FINANCE.COUPNUM_SLK,CMP,1295.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coupnum = coupnum - 1;
F.FINANCE.COUPNUM_SLK,CMP,1296.0,Statement Source,Executable,ASSIGN,0.0,1.0,,_coupnum_slk_ = coupnum;
F.FINANCE.COUPNUM_SLK,CMP,1297.0,Statement Source,Executable,RETURN,0.0,1.0,,return(_coupnum_slk_);
F.FINANCE.COUPNUM_SLK,CMP,1298.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.EFFECT_SLK,CMP,1299.0,Prototype,FCmp,finance,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[effect_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel EFFECT]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[nominal_rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[npery]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.EFFECT_SLK,CMP,1300.0,Header,Function,Excel EFFECT,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.414</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel EFFECT]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.EFFECT_SLK,CMP,1301.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function effect_slk( nominal_rate, npery ) label= ""Excel EFFECT"";"
F.FINANCE.EFFECT_SLK,CMP,1302.0,Statement Source,Comment,CMT,0.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     effect_slk
  *
  * PURPOSE:   Microsoft Excel's EFFECT function.  Returns the
  *            effective annual interest rate, given the nominal
  *            annual interest rate and the number of compounding
  *            periods per year.
  *
  * USAGE:     effect = effect_slk( nominal_rate, npery );
  *               nominal_rate - nominal interest rate.
  *               npery - number of compounding periods per year.
  *-----------------------------------------------------------------*/"
F.FINANCE.EFFECT_SLK,CMP,1303.0,Statement Source,Executable,ASSIGN,0.0,1.0,,effect = (1 + nominal_rate/npery)**npery - 1;
F.FINANCE.EFFECT_SLK,CMP,1304.0,Statement Source,Executable,RETURN,0.0,1.0,,return(effect);
F.FINANCE.EFFECT_SLK,CMP,1305.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.DOLLARFR_SLK,CMP,1306.0,Prototype,FCmp,finance,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[dollarfr_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel DOLLARFR]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[ddollar]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[frac]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.DOLLARFR_SLK,CMP,1307.0,Header,Function,Excel DOLLARFR,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.415</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel DOLLARFR]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.DOLLARFR_SLK,CMP,1308.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function dollarfr_slk(ddollar,frac) label= ""Excel DOLLARFR"";"
F.FINANCE.DOLLARFR_SLK,CMP,1309.0,Statement Source,Comment,CMT,0.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     dollarfr_slk
  *
  * PURPOSE:   Microsoft Excel's DOLLARFR function.  Converts a
  *            dollar price expressed as a decimal number into a
  *            dollar price expressed as a fraction.
  *
  * USAGE:     f = dollarfr_slk(ddollar,frac);
  *               ddollar - decimal dollar amount.
  *               frac - denominator of the fraction.
  *-----------------------------------------------------------------*/"
F.FINANCE.DOLLARFR_SLK,CMP,1310.0,Statement Source,Executable,IF,0.0,2.0,,if frac <= 0 then
F.FINANCE.DOLLARFR_SLK,CMP,1311.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.DOLLARFR_SLK,CMP,1312.0,Statement Source,Executable,ASSIGN,0.0,1.0,,dollarfr = int(ddollar) + (ddollar - int(ddollar)) * int(frac)/10**(int(log10(int(frac)))+1);
F.FINANCE.DOLLARFR_SLK,CMP,1313.0,Statement Source,Executable,RETURN,0.0,1.0,,return(dollarfr);
F.FINANCE.DOLLARFR_SLK,CMP,1314.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.DOLLARDE_SLK,CMP,1315.0,Prototype,FCmp,finance,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[dollarde_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel DOLLARDE]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[fdollar]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[frac]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.DOLLARDE_SLK,CMP,1316.0,Header,Function,Excel DOLLARDE,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.415</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel DOLLARDE]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.DOLLARDE_SLK,CMP,1317.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function dollarde_slk(fdollar,frac) label= ""Excel DOLLARDE"";"
F.FINANCE.DOLLARDE_SLK,CMP,1318.0,Statement Source,Comment,CMT,0.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     dollarde_slk
  *
  * PURPOSE:   Microsoft Excel's DOLLARDE function.  Converts a
  *            dollar price expressed as a frac into a dollar
  *            price expressed as decimal number.
  *
  * USAGE:     f = dollarde_slk(fdollar,frac);
  *               fdollar - fractional dollar amount.
  *               frac - denominator of the fraction.
  *-----------------------------------------------------------------*/"
F.FINANCE.DOLLARDE_SLK,CMP,1319.0,Statement Source,Executable,IF,0.0,2.0,,if frac <= 0 then
F.FINANCE.DOLLARDE_SLK,CMP,1320.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.DOLLARDE_SLK,CMP,1321.0,Statement Source,Executable,ASSIGN,0.0,1.0,,dollarde = int(fdollar) + (fdollar - int(fdollar)) * 10**(int(log10(int(frac)))+1)/int(frac);
F.FINANCE.DOLLARDE_SLK,CMP,1322.0,Statement Source,Executable,RETURN,0.0,1.0,,return(dollarde);
F.FINANCE.DOLLARDE_SLK,CMP,1323.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.TBILLYIELD_SLK,CMP,1324.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[tbillyield_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel TBILLYIELD]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[par]]></S><S n=""Kind""><![CDATA[v]]></"
F.FINANCE.TBILLYIELD_SLK,CMP,1325.0,Prototype,FCmp,finance,2.0,,,"S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.TBILLYIELD_SLK,CMP,1326.0,Header,Function,Excel TBILLYIELD,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.416</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel TBILLYIELD]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.TBILLYIELD_SLK,CMP,1327.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function tbillyield_slk(settlement,maturity,par) label= ""Excel TBILLYIELD"";"
F.FINANCE.TBILLYIELD_SLK,CMP,1328.0,Statement Source,Comment,CMT,0.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     tbillprice_slk
  *
  * PURPOSE:   Microsoft Excel's TBILLYIELS function.  Returns the
   *            yield for a Treasury bill.
  *
  * USAGE:     tbilly = tbillyield_slk(settlement,maturity,par);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               maturity - The security's maturity date. The
  *                   maturity is the date when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               par - the Treasury Bill's price per $100 face value.
  *-----------------------------------------------------------------*/"
F.FINANCE.TBILLYIELD_SLK,CMP,1329.0,Statement Source,Executable,IF,0.0,2.0,,if par <= 0 | settlement >= maturity then
F.FINANCE.TBILLYIELD_SLK,CMP,1330.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.TBILLYIELD_SLK,CMP,1331.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement, maturity,'act/act');"
F.FINANCE.TBILLYIELD_SLK,CMP,1332.0,Statement Source,Executable,IF,0.0,2.0,,if DSM > 366 then
F.FINANCE.TBILLYIELD_SLK,CMP,1333.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.TBILLYIELD_SLK,CMP,1334.0,Statement Source,Executable,ASSIGN,0.0,1.0,,tbillyield = (100 - par)/par*360/DSM;
F.FINANCE.TBILLYIELD_SLK,CMP,1335.0,Statement Source,Executable,RETURN,0.0,1.0,,return(tbillyield);
F.FINANCE.TBILLYIELD_SLK,CMP,1336.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.TBILLPRICE_SLK,CMP,1337.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[tbillprice_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel TBILLPRICE]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[discount]]></S><S n=""Kind""><![CDATA[v"
F.FINANCE.TBILLPRICE_SLK,CMP,1338.0,Prototype,FCmp,finance,2.0,,,"]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.TBILLPRICE_SLK,CMP,1339.0,Header,Function,Excel TBILLPRICE,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.417</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel TBILLPRICE]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.TBILLPRICE_SLK,CMP,1340.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function tbillprice_slk(settlement,maturity,discount) label= ""Excel TBILLPRICE"";"
F.FINANCE.TBILLPRICE_SLK,CMP,1341.0,Statement Source,Comment,CMT,0.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     tbillprice_slk
  *
  * PURPOSE:   Microsoft Excel's TBILLPRICE function.  Returns the
   *            price per $100 face value for a Treasury bill.
  *
  * USAGE:     tbillpr = tbillprice_slk(settlement,maturity,discount);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               maturity - The security's maturity date. The
  *                   maturity is the date when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               discount - the treasury bill's discount rate.
  *-----------------------------------------------------------------*/"
F.FINANCE.TBILLPRICE_SLK,CMP,1342.0,Statement Source,Executable,IF,0.0,2.0,,if discount <= 0 | settlement >= maturity then
F.FINANCE.TBILLPRICE_SLK,CMP,1343.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.TBILLPRICE_SLK,CMP,1344.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement, maturity,'act/act');"
F.FINANCE.TBILLPRICE_SLK,CMP,1345.0,Statement Source,Executable,ASSIGN,0.0,1.0,,tbillprice = 100*(1-discount*DSM/360);
F.FINANCE.TBILLPRICE_SLK,CMP,1346.0,Statement Source,Executable,RETURN,0.0,1.0,,return(tbillprice);
F.FINANCE.TBILLPRICE_SLK,CMP,1347.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.TBILLEQ_SLK,CMP,1348.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[tbilleq_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel TBILLEQ]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[discount]]></S><S n=""Kind""><![CDATA[v]]></S"
F.FINANCE.TBILLEQ_SLK,CMP,1349.0,Prototype,FCmp,finance,2.0,,,"><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.TBILLEQ_SLK,CMP,1350.0,Header,Function,Excel TBILLEQ,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.419</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel TBILLEQ]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.TBILLEQ_SLK,CMP,1351.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function tbilleq_slk(settlement,maturity,discount) label= ""Excel TBILLEQ"";"
F.FINANCE.TBILLEQ_SLK,CMP,1352.0,Statement Source,Comment,CMT,0.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     tbilleq_slk
  *
  * PURPOSE:   Microsoft Excel's TBILLEQ function.  Returns the
   *            bond-equivalent yield for a Treasury bill.
  *
  * USAGE:     tbilleq = tbilleq_slk(settlement,maturity,discount);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               maturity - The security's maturity date. The
  *                   maturity is the date when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               discount - the treasury bill's discount rate.
  *-----------------------------------------------------------------*/"
F.FINANCE.TBILLEQ_SLK,CMP,1353.0,Statement Source,Executable,IF,0.0,2.0,,if discount <= 0 | settlement >= maturity then
F.FINANCE.TBILLEQ_SLK,CMP,1354.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.TBILLEQ_SLK,CMP,1355.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement, maturity,'act/360');"
F.FINANCE.TBILLEQ_SLK,CMP,1356.0,Statement Source,Executable,ASSIGN,0.0,1.0,,tbilleq = (365*discount)/(360-(discount*DSM));
F.FINANCE.TBILLEQ_SLK,CMP,1357.0,Statement Source,Executable,RETURN,0.0,1.0,,return(tbilleq);
F.FINANCE.TBILLEQ_SLK,CMP,1358.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.DISC_SLK,CMP,1359.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[disc_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel DISC]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[settlement]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[maturity]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[pr]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type"""
F.FINANCE.DISC_SLK,CMP,1360.0,Prototype,FCmp,finance,2.0,,,"><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[redemp]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.DISC_SLK,CMP,1361.0,Header,Function,Excel DISC,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                   1726676902.42</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel DISC]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.DISC_SLK,CMP,1362.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function disc_slk(settlement,maturity,pr,redemp,basis ) label= ""Excel DISC"";"
F.FINANCE.DISC_SLK,CMP,1363.0,Statement Source,Comment,CMT,1.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     disc_slk
  *
  * PURPOSE:   Microsoft Excel's DISC function.  Returns the
  *            discount rate for a security.
  *
  * USAGE:     disc = disc_slk(settlement,maturity,pr,redemp,basis);
  *               settlement - The security's settlement date. The
  *                   security settlement date is the date after
  *                   the issue date when the security is traded
  *                   to the buyer.
  *                   Expressed as SAS date, e.g., '15feb98'd.
  *               maturity - The security's maturity date. The
  *                   maturity is the date when the security expires.
  *                   Expressed as SAS date, e.g., '10jun98'd.
  *               pr - the security's price per $100 face value.
  *               redemp - the security's redemption value per
  *                   $100 face value.
  *               basis - type of day count basis.
  *                   basis = 0: US (NA"
F.FINANCE.DISC_SLK,CMP,1364.0,Statement Source,Comment,CMT,2.0,101.0,,"SD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: Actual/360.
  *                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *-----------------------------------------------------------------*/"
F.FINANCE.DISC_SLK,CMP,1365.0,Statement Source,Executable,IF,0.0,2.0,,if redemp <= 0 | pr <= 0 | basis < 0 | basis > 4 | settlement >= maturity then
F.FINANCE.DISC_SLK,CMP,1366.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.DISC_SLK,CMP,1367.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.DISC_SLK,CMP,1368.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.DISC_SLK,CMP,1369.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.DISC_SLK,CMP,1370.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.DISC_SLK,CMP,1371.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'30/360');"
F.FINANCE.DISC_SLK,CMP,1372.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.DISC_SLK,CMP,1373.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.DISC_SLK,CMP,1374.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.DISC_SLK,CMP,1375.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"newyeard = intnx('year', maturity - 1, 0);"
F.FINANCE.DISC_SLK,CMP,1376.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"endyeard = intnx('year', maturity - 1, 1) - 1;"
F.FINANCE.DISC_SLK,CMP,1377.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = endyeard - newyeard + 1;
F.FINANCE.DISC_SLK,CMP,1378.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/act');"
F.FINANCE.DISC_SLK,CMP,1379.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.DISC_SLK,CMP,1380.0,Statement Source,Executable,WHEN,0.0,16.0,,when(2)
F.FINANCE.DISC_SLK,CMP,1381.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.DISC_SLK,CMP,1382.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.DISC_SLK,CMP,1383.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/360');"
F.FINANCE.DISC_SLK,CMP,1384.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.DISC_SLK,CMP,1385.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.DISC_SLK,CMP,1386.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.DISC_SLK,CMP,1387.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 365;
F.FINANCE.DISC_SLK,CMP,1388.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif(settlement,maturity,'act/365');"
F.FINANCE.DISC_SLK,CMP,1389.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.DISC_SLK,CMP,1390.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.DISC_SLK,CMP,1391.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.DISC_SLK,CMP,1392.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.DISC_SLK,CMP,1393.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DSM = datdif4_slk(settlement,maturity);"
F.FINANCE.DISC_SLK,CMP,1394.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.DISC_SLK,CMP,1395.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.DISC_SLK,CMP,1396.0,Statement Source,Executable,;,0.0,14.0,,;
F.FINANCE.DISC_SLK,CMP,1397.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.DISC_SLK,CMP,1398.0,Statement Source,Executable,ASSIGN,0.0,1.0,,disc = (redemp - pr)/redemp*B/DSM;
F.FINANCE.DISC_SLK,CMP,1399.0,Statement Source,Executable,RETURN,0.0,1.0,,return(disc);
F.FINANCE.DISC_SLK,CMP,1400.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.AMORDEGRC_SLK,CMP,1401.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[amordegrc_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel AMORDEGRC]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[cost]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[datep]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[fperiod]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""T"
F.FINANCE.AMORDEGRC_SLK,CMP,1402.0,Prototype,FCmp,finance,1.0,,,"ype""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[salvage]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[period]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n"
F.FINANCE.AMORDEGRC_SLK,CMP,1403.0,Prototype,FCmp,finance,2.0,,,"=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">0</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.AMORDEGRC_SLK,CMP,1404.0,Header,Function,Excel AMORDEGRC,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.422</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel AMORDEGRC]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.AMORDEGRC_SLK,CMP,1405.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function amordegrc_slk(cost,datep,fperiod,salvage,period,rate,basis) label= ""Excel AMORDEGRC"";"
F.FINANCE.AMORDEGRC_SLK,CMP,1406.0,Statement Source,Comment,CMT,1.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     amordegrc_slk
  *
  * PURPOSE:   Microsoft Excel's AMORDEGRC function. Returns the
  *            depreciation for each accounting period. Similar to
  *            amorlinc function, except that a depreciation
  *            coefficient is applied.
  *
  * USAGE:     amordegrc = amordegrc_slk(cost,datep,fperiod,salvage,
  *                                    period,rate,basis);
  *               cost - cost of the asset.
  *               datep - date of the purchase of the asset.
  *               fperiod - date of the end of the first period.
  *               salvage - salvage value at the end of the life
  *                  of the asset.
  *               period - the period.
  *               rate - the rate of depreciation.e
  *               basis - type of day count basis.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: NOT ALLOWED.
"
F.FINANCE.AMORDEGRC_SLK,CMP,1407.0,Statement Source,Comment,CMT,1.0,101.0,,"*                   basis = 3: Actual/365.
  *                   basis = 4: European 30/360.
  *
  * NOTES:  The depreciation coefficient is different depending one
  *         the number of years in the life of the asset being
  *         depreciated. The life of asset is the inverse
  *         of rate:
  *
  *        rate           life of asset   depreciation coeff (DC)
  *        0.25-0.333     3-4 years       1.5
  *        0.1666-0.2     5-6 years       2.0
  *        < 0.1666       >6 years        2.5
  *
  *        The function will return depreciation until the last
  *        period of the life of the asset, or until the
  *        accumulated value of depreciation is greater than the
  *        cost of the asset minus the salvage value.
  *
  *     For period 0:
  *        cost*rate*DC*yearfrac(datep, fperiod, basis);
  *          where yearfrac() calculates the fraction
  *          of the year represented by the whole days between
  *          the start_date and end_date.
  *
  *     For periods"
F.FINANCE.AMORDEGRC_SLK,CMP,1408.0,Statement Source,Comment,CMT,2.0,101.0,,"1 through lifeofasset - 2:
  *        (cost - depreciation from previous periods)*rate*DC;
  *
  *     For the period of lifeofasset - 1 through
  *                 the last period of asset's life:
  *        (cost - depreciation from previous periods)/2;
  *
  *     When the accumulated value of depreciation exceeds the cost
  *     of the asset minus the salvage value, then the function
  *     returns zero.
  *
  *-----------------------------------------------------------------*/"
F.FINANCE.AMORDEGRC_SLK,CMP,1409.0,Statement Source,Executable,ASSIGN,0.0,1.0,,life = 1/rate;
F.FINANCE.AMORDEGRC_SLK,CMP,1410.0,Statement Source,Executable,IF,0.0,2.0,,if life > 0 & life < 1 then
F.FINANCE.AMORDEGRC_SLK,CMP,1411.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.AMORDEGRC_SLK,CMP,1412.0,Statement Source,Executable,IF,0.0,2.0,,if life > 1 & life < 2 then
F.FINANCE.AMORDEGRC_SLK,CMP,1413.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.AMORDEGRC_SLK,CMP,1414.0,Statement Source,Executable,IF,0.0,2.0,,if life > 2 & life < 3 then
F.FINANCE.AMORDEGRC_SLK,CMP,1415.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.AMORDEGRC_SLK,CMP,1416.0,Statement Source,Executable,IF,0.0,2.0,,if life > 4 & life < 5 then
F.FINANCE.AMORDEGRC_SLK,CMP,1417.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.AMORDEGRC_SLK,CMP,1418.0,Statement Source,Executable,IF,0.0,2.0,,if life > 3 & life < 4 then
F.FINANCE.AMORDEGRC_SLK,CMP,1419.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coeff = 1.5;
F.FINANCE.AMORDEGRC_SLK,CMP,1420.0,Statement Source,Executable,IF,0.0,2.0,,if life > 5 & life < 6 then
F.FINANCE.AMORDEGRC_SLK,CMP,1421.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coeff = 2;
F.FINANCE.AMORDEGRC_SLK,CMP,1422.0,Statement Source,Executable,IF,0.0,2.0,,if life > 6 then
F.FINANCE.AMORDEGRC_SLK,CMP,1423.0,Statement Source,Executable,ASSIGN,0.0,1.0,,coeff = 2.5;
F.FINANCE.AMORDEGRC_SLK,CMP,1424.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.AMORDEGRC_SLK,CMP,1425.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.AMORDEGRC_SLK,CMP,1426.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORDEGRC_SLK,CMP,1427.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.AMORDEGRC_SLK,CMP,1428.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DPF = datdif(datep, fperiod,'30/360');"
F.FINANCE.AMORDEGRC_SLK,CMP,1429.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORDEGRC_SLK,CMP,1430.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.AMORDEGRC_SLK,CMP,1431.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORDEGRC_SLK,CMP,1432.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"newyeard = intnx('year', datep - 1, 0);"
F.FINANCE.AMORDEGRC_SLK,CMP,1433.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"endyeard = intnx('year', datep - 1, 1) - 1;"
F.FINANCE.AMORDEGRC_SLK,CMP,1434.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = endyeard - newyeard + 1;
F.FINANCE.AMORDEGRC_SLK,CMP,1435.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DPF = datdif(datep, fperiod, 'act/act');"
F.FINANCE.AMORDEGRC_SLK,CMP,1436.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORDEGRC_SLK,CMP,1437.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.AMORDEGRC_SLK,CMP,1438.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORDEGRC_SLK,CMP,1439.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 365;
F.FINANCE.AMORDEGRC_SLK,CMP,1440.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DPF = datdif(datep, fperiod, 'act/365');"
F.FINANCE.AMORDEGRC_SLK,CMP,1441.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORDEGRC_SLK,CMP,1442.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.AMORDEGRC_SLK,CMP,1443.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORDEGRC_SLK,CMP,1444.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.AMORDEGRC_SLK,CMP,1445.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DPF = datdif4_slk(datep, fperiod);"
F.FINANCE.AMORDEGRC_SLK,CMP,1446.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORDEGRC_SLK,CMP,1447.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.AMORDEGRC_SLK,CMP,1448.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.AMORDEGRC_SLK,CMP,1449.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORDEGRC_SLK,CMP,1450.0,Statement Source,Executable,ASSIGN,0.0,1.0,,depr0 = cost*rate*coeff*DPF/B;
F.FINANCE.AMORDEGRC_SLK,CMP,1451.0,Statement Source,Executable,IF,0.0,2.0,,if period = 0 then
F.FINANCE.AMORDEGRC_SLK,CMP,1452.0,Statement Source,Executable,RETURN,0.0,1.0,,return(depr0);
F.FINANCE.AMORDEGRC_SLK,CMP,1453.0,Statement Source,Executable,IF,0.0,2.0,,if period > life then
F.FINANCE.AMORDEGRC_SLK,CMP,1454.0,Statement Source,Executable,RETURN,0.0,1.0,,return(0);
F.FINANCE.AMORDEGRC_SLK,CMP,1455.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cumdep = depr0;
F.FINANCE.AMORDEGRC_SLK,CMP,1456.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cms = cost - salvage;
F.FINANCE.AMORDEGRC_SLK,CMP,1457.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cost = cost - depr0;
F.FINANCE.AMORDEGRC_SLK,CMP,1458.0,Statement Source,Executable,ASSIGN,0.0,1.0,,n = 1;
F.FINANCE.AMORDEGRC_SLK,CMP,1459.0,Statement Source,Executable,IF,0.0,2.0,,if int(period) <= int(life) - 2 then
F.FINANCE.AMORDEGRC_SLK,CMP,1460.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORDEGRC_SLK,CMP,1461.0,Statement Source,Executable,DO,0.0,3.0,,do while(n <= period & cumdep <= cms );
F.FINANCE.AMORDEGRC_SLK,CMP,1462.0,Statement Source,Executable,ASSIGN,0.0,1.0,,tempdep = cost*rate*coeff;
F.FINANCE.AMORDEGRC_SLK,CMP,1463.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cost = cost - tempdep;
F.FINANCE.AMORDEGRC_SLK,CMP,1464.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cumdep + tempdep;
F.FINANCE.AMORDEGRC_SLK,CMP,1465.0,Statement Source,Executable,ASSIGN,0.0,1.0,,n + 1;
F.FINANCE.AMORDEGRC_SLK,CMP,1466.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORDEGRC_SLK,CMP,1467.0,Statement Source,Executable,ASSIGN,0.0,1.0,,depr = tempdep;
F.FINANCE.AMORDEGRC_SLK,CMP,1468.0,Statement Source,Executable,IF,0.0,2.0,,if cumdep > cms & period >= n then
F.FINANCE.AMORDEGRC_SLK,CMP,1469.0,Statement Source,Executable,RETURN,0.0,1.0,,return(0);
F.FINANCE.AMORDEGRC_SLK,CMP,1470.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.AMORDEGRC_SLK,CMP,1471.0,Statement Source,Executable,RETURN,0.0,1.0,,return(depr);
F.FINANCE.AMORDEGRC_SLK,CMP,1472.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORDEGRC_SLK,CMP,1473.0,Statement Source,Executable,IF,0.0,2.0,,if int(period) >= int(life) - 1 then
F.FINANCE.AMORDEGRC_SLK,CMP,1474.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORDEGRC_SLK,CMP,1475.0,Statement Source,Executable,ASSIGN,0.0,1.0,,ind = int(life) - 1;
F.FINANCE.AMORDEGRC_SLK,CMP,1476.0,Statement Source,Executable,DO,0.0,3.0,,do while(n < ind & cumdep <= cms );
F.FINANCE.AMORDEGRC_SLK,CMP,1477.0,Statement Source,Executable,ASSIGN,0.0,1.0,,tempdep = cost*rate*coeff;
F.FINANCE.AMORDEGRC_SLK,CMP,1478.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cost = cost - tempdep;
F.FINANCE.AMORDEGRC_SLK,CMP,1479.0,Statement Source,Executable,ASSIGN,0.0,1.0,,cumdep + tempdep;
F.FINANCE.AMORDEGRC_SLK,CMP,1480.0,Statement Source,Executable,ASSIGN,0.0,1.0,,n + 1;
F.FINANCE.AMORDEGRC_SLK,CMP,1481.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORDEGRC_SLK,CMP,1482.0,Statement Source,Executable,ASSIGN,0.0,1.0,,deprl = cost/2;
F.FINANCE.AMORDEGRC_SLK,CMP,1483.0,Statement Source,Executable,IF,0.0,2.0,,if int(period) = int(life) - 1 then
F.FINANCE.AMORDEGRC_SLK,CMP,1484.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORDEGRC_SLK,CMP,1485.0,Statement Source,Executable,IF,0.0,2.0,,if cumdep > cms & period >= n then
F.FINANCE.AMORDEGRC_SLK,CMP,1486.0,Statement Source,Executable,RETURN,0.0,1.0,,return(0);
F.FINANCE.AMORDEGRC_SLK,CMP,1487.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.AMORDEGRC_SLK,CMP,1488.0,Statement Source,Executable,RETURN,0.0,1.0,,return(deprl);
F.FINANCE.AMORDEGRC_SLK,CMP,1489.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORDEGRC_SLK,CMP,1490.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.AMORDEGRC_SLK,CMP,1491.0,Statement Source,Executable,IF,0.0,2.0,,if int(period) = int(life) then
F.FINANCE.AMORDEGRC_SLK,CMP,1492.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORDEGRC_SLK,CMP,1493.0,Statement Source,Executable,IF,0.0,2.0,,if salvage < deprl & cumdep <= cms then
F.FINANCE.AMORDEGRC_SLK,CMP,1494.0,Statement Source,Executable,RETURN,0.0,1.0,,return(deprl);
F.FINANCE.AMORDEGRC_SLK,CMP,1495.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.AMORDEGRC_SLK,CMP,1496.0,Statement Source,Executable,RETURN,0.0,1.0,,return(0);
F.FINANCE.AMORDEGRC_SLK,CMP,1497.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORDEGRC_SLK,CMP,1498.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORDEGRC_SLK,CMP,1499.0,Statement Source,Executable,RETURN,0.0,1.0,,return(deprl);
F.FINANCE.AMORDEGRC_SLK,CMP,1500.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.AMORLINC_SLK,CMP,1501.0,Prototype,FCmp,finance,1.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[amorlinc_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel AMORLINC]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[cost]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[datep]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[fperiod]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Typ"
F.FINANCE.AMORLINC_SLK,CMP,1502.0,Prototype,FCmp,finance,1.0,,,"e""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[salvage]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[period]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[rate]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""T"
F.FINANCE.AMORLINC_SLK,CMP,1503.0,Prototype,FCmp,finance,2.0,,,"ype""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[basis]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">0</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.AMORLINC_SLK,CMP,1504.0,Header,Function,Excel AMORLINC,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.425</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel AMORLINC]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.AMORLINC_SLK,CMP,1505.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function amorlinc_slk(cost,datep,fperiod,salvage,period,rate,basis) label= ""Excel AMORLINC"";"
F.FINANCE.AMORLINC_SLK,CMP,1506.0,Statement Source,Comment,CMT,1.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     amorlinc_slk
  *
  * PURPOSE:   Microsoft Excel's AMORLINC function. Returns the
  *            depreciation for each accounting period in the French
  *            accounting system.
  *
  * USAGE:     amorlinc = amorlinc_slk(cost,datep,fperiod,salvage,
  *                                   period,rate,basis);
  *               cost - cost of the asset.
  *               datep - date of the purchase of the asset.
  *               fperiod - date of the end of the first period.
  *               salvage - salvage value at the end of the life
  *                  of the asset.
  *               period - the period.
  *               rate - the rate of depreciation.
  *               basis - type of day count basis.
  *                   basis = 0: US (NASD) 30/360.
  *                   basis = 1: Actual/actual.
  *                   basis = 2: NOT ALLOWED.
  *                   basis = 3: Actual/365.
  *                   basis"
F.FINANCE.AMORLINC_SLK,CMP,1507.0,Statement Source,Comment,CMT,2.0,101.0,,"= 4: European 30/360.
  *
   * NOTES: For period 0:
  *           amlc = cost*rate*yearfrac(datep, fperiod, basis);
  *              where yearfrac(s) calculates the fraction of the
  *              year represented by the whole days between the
  *              start_date and end_date.
  *
  *        For period 1 through last period - 1:
  *           amlc = cost*rate;
  *
  *        For the last period:
  *           amlc = cost - salvage - cumulated deprec in previous periods;
  *
  *    The total number of periods for depreciation is calculated
  *    as follows:
  *        N = int((cost-salvage)/(cost*rate)) + 1;
  *
  *-----------------------------------------------------------------*/"
F.FINANCE.AMORLINC_SLK,CMP,1508.0,Statement Source,Executable,ASSIGN,0.0,1.0,,depr = cost*rate;
F.FINANCE.AMORLINC_SLK,CMP,1509.0,Statement Source,Executable,ASSIGN,0.0,1.0,,n = int((cost - salvage)/depr);
F.FINANCE.AMORLINC_SLK,CMP,1510.0,Statement Source,Executable,IF,0.0,2.0,,if period ~= 0 and int(period) <= n then
F.FINANCE.AMORLINC_SLK,CMP,1511.0,Statement Source,Executable,RETURN,0.0,1.0,,return(depr);
F.FINANCE.AMORLINC_SLK,CMP,1512.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.AMORLINC_SLK,CMP,1513.0,Statement Source,Executable,IF,0.0,2.0,,if int(period) > n + 1 then
F.FINANCE.AMORLINC_SLK,CMP,1514.0,Statement Source,Executable,RETURN,0.0,1.0,,return(0);
F.FINANCE.AMORLINC_SLK,CMP,1515.0,Statement Source,Executable,ELSE,0.0,9.0,,else
F.FINANCE.AMORLINC_SLK,CMP,1516.0,Statement Source,Executable,IF,0.0,2.0,,if int(period) = n + 1 | period = 0 then
F.FINANCE.AMORLINC_SLK,CMP,1517.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORLINC_SLK,CMP,1518.0,Statement Source,Executable,SELECT,0.0,15.0,,select(basis);
F.FINANCE.AMORLINC_SLK,CMP,1519.0,Statement Source,Executable,WHEN,0.0,16.0,,when(0)
F.FINANCE.AMORLINC_SLK,CMP,1520.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORLINC_SLK,CMP,1521.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.AMORLINC_SLK,CMP,1522.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DPF = datdif(datep, fperiod,'30/360');"
F.FINANCE.AMORLINC_SLK,CMP,1523.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORLINC_SLK,CMP,1524.0,Statement Source,Executable,WHEN,0.0,16.0,,when(1)
F.FINANCE.AMORLINC_SLK,CMP,1525.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORLINC_SLK,CMP,1526.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"newyeard = intnx('year', datep - 1, 0);"
F.FINANCE.AMORLINC_SLK,CMP,1527.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"endyeard = intnx('year', datep - 1, 1) - 1;"
F.FINANCE.AMORLINC_SLK,CMP,1528.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = endyeard - newyeard + 1;
F.FINANCE.AMORLINC_SLK,CMP,1529.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DPF = datdif(datep, fperiod,'act/act');"
F.FINANCE.AMORLINC_SLK,CMP,1530.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORLINC_SLK,CMP,1531.0,Statement Source,Executable,WHEN,0.0,16.0,,when(3)
F.FINANCE.AMORLINC_SLK,CMP,1532.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORLINC_SLK,CMP,1533.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 365;
F.FINANCE.AMORLINC_SLK,CMP,1534.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DPF = datdif(datep, fperiod,'act/365');"
F.FINANCE.AMORLINC_SLK,CMP,1535.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORLINC_SLK,CMP,1536.0,Statement Source,Executable,WHEN,0.0,16.0,,when(4)
F.FINANCE.AMORLINC_SLK,CMP,1537.0,Statement Source,Executable,DO,0.0,3.0,,do;
F.FINANCE.AMORLINC_SLK,CMP,1538.0,Statement Source,Executable,ASSIGN,0.0,1.0,,B = 360;
F.FINANCE.AMORLINC_SLK,CMP,1539.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"DPF = datdif4_slk(datep, fperiod);"
F.FINANCE.AMORLINC_SLK,CMP,1540.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORLINC_SLK,CMP,1541.0,Statement Source,Executable,OTHERWIS,0.0,17.0,,otherwise
F.FINANCE.AMORLINC_SLK,CMP,1542.0,Statement Source,Executable,RETURN,0.0,1.0,,return(.);
F.FINANCE.AMORLINC_SLK,CMP,1543.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORLINC_SLK,CMP,1544.0,Statement Source,Executable,ASSIGN,0.0,1.0,,depr0 = depr*DPF/B;
F.FINANCE.AMORLINC_SLK,CMP,1545.0,Statement Source,Executable,IF,0.0,2.0,,if period = 0 then
F.FINANCE.AMORLINC_SLK,CMP,1546.0,Statement Source,Executable,RETURN,0.0,1.0,,return(depr0);
F.FINANCE.AMORLINC_SLK,CMP,1547.0,Statement Source,Executable,ASSIGN,0.0,1.0,,amorlinc = cost - salvage - n*depr - depr0;
F.FINANCE.AMORLINC_SLK,CMP,1548.0,Statement Source,Executable,RETURN,0.0,1.0,,return(amorlinc);
F.FINANCE.AMORLINC_SLK,CMP,1549.0,Statement Source,Executable,END,0.0,10.0,,end;
F.FINANCE.AMORLINC_SLK,CMP,1550.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.FINANCE.DATDIF4_SLK,CMP,1551.0,Prototype,FCmp,finance,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[datdif4_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[European DATDIF]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[start]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[end]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.FINANCE.DATDIF4_SLK,CMP,1552.0,Header,Function,European DATDIF,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.428</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[European DATDIF]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[finance]]></S></L>"
F.FINANCE.DATDIF4_SLK,CMP,1553.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function datdif4_slk( start, end ) label= ""European DATDIF"";"
F.FINANCE.DATDIF4_SLK,CMP,1554.0,Statement Source,Comment,CMT,1.0,101.0,,"/*-----------------------------------------------------------------
  * ENTRY:     datdif4_slk
  *
  * PURPOSE:   Returns the number of days between two dates using
  *            the European '30/360' method of calculation.
  *
  * USAGE:     numdays = datdif4_slk( start, end );
  *               start - the start date from which to calculate
  *                       number of days, expressed as SAS date
  *                       value, e.g., '15feb98'd.
  *               end   - the end date from which to calculate
  *                       number of days, expressed as SAS date
  *                       value, e.g., '15mar98'd.
  *
  * NOTES:     If either start date or end date is on the 31st of
  *            a month, then it is set equal to the 30th of the same
  *            month. If the start date is on the last day of a
  *            February, then the difference between 30 and the
  *            length of the same year's February is added to the
  *            usual U.S.(NASD) method of '30/360' d"
F.FINANCE.DATDIF4_SLK,CMP,1555.0,Statement Source,Comment,CMT,2.0,101.0,,"ay count basis.
  *-----------------------------------------------------------------*/"
F.FINANCE.DATDIF4_SLK,CMP,1556.0,Statement Source,Executable,ASSIGN,0.0,1.0,,startday = day(start);
F.FINANCE.DATDIF4_SLK,CMP,1557.0,Statement Source,Executable,ASSIGN,0.0,1.0,,startmon = month(start);
F.FINANCE.DATDIF4_SLK,CMP,1558.0,Statement Source,Executable,ASSIGN,0.0,1.0,,startyear = year(start);
F.FINANCE.DATDIF4_SLK,CMP,1559.0,Statement Source,Executable,ASSIGN,0.0,1.0,,endday = day(end);
F.FINANCE.DATDIF4_SLK,CMP,1560.0,Statement Source,Executable,ASSIGN,0.0,1.0,,endmon = month(end);
F.FINANCE.DATDIF4_SLK,CMP,1561.0,Statement Source,Executable,ASSIGN,0.0,1.0,,endyear = year(end);
F.FINANCE.DATDIF4_SLK,CMP,1562.0,Statement Source,Executable,IF,0.0,2.0,,if startday = 31 then
F.FINANCE.DATDIF4_SLK,CMP,1563.0,Statement Source,Executable,ASSIGN,0.0,1.0,,startday = 30;
F.FINANCE.DATDIF4_SLK,CMP,1564.0,Statement Source,Executable,IF,0.0,2.0,,if endday = 31 then
F.FINANCE.DATDIF4_SLK,CMP,1565.0,Statement Source,Executable,ASSIGN,0.0,1.0,,endday = 30;
F.FINANCE.DATDIF4_SLK,CMP,1566.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"restart = mdy(startmon,startday,startyear);"
F.FINANCE.DATDIF4_SLK,CMP,1567.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"reend = mdy(endmon,endday,endyear);"
F.FINANCE.DATDIF4_SLK,CMP,1568.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"datdif4 = datdif(restart,reend,'30/360');"
F.FINANCE.DATDIF4_SLK,CMP,1569.0,Statement Source,Comment,CMT,0.0,101.0,,/* adjust for february start and falls on the last day of february */
F.FINANCE.DATDIF4_SLK,CMP,1570.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"febstart = mdy(2,1,startyear);"
F.FINANCE.DATDIF4_SLK,CMP,1571.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"marstart = mdy(3,1,startyear);"
F.FINANCE.DATDIF4_SLK,CMP,1572.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"feblength = datdif(febstart,marstart,'act/act');"
F.FINANCE.DATDIF4_SLK,CMP,1573.0,Statement Source,Executable,IF,0.0,2.0,,if feblength = 28 & startday = 28 then
F.FINANCE.DATDIF4_SLK,CMP,1574.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"datdif4 = datdif(start,end,'30/360') + 2;"
F.FINANCE.DATDIF4_SLK,CMP,1575.0,Statement Source,Executable,IF,0.0,2.0,,if feblength = 29 & startday = 29 then
F.FINANCE.DATDIF4_SLK,CMP,1576.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"datdif4 = datdif(start,end,'30/360') + 1;"
F.FINANCE.DATDIF4_SLK,CMP,1577.0,Statement Source,Executable,RETURN,0.0,1.0,,return(datdif4);
F.FINANCE.DATDIF4_SLK,CMP,1578.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
MATH,CMP,0.0,Header,Package,,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                   1726676902.49</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Package]]></S><N n=""Obfuscate"">0</N></L>"
F.MATH.FLOOR_SLK,CMP,0.0,Prototype,FCmp,math,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[floor_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel FLOOR]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[n]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L><L n=""Arg""><S n=""Name""><![CDATA[sg]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.MATH.FLOOR_SLK,CMP,1.0,Header,Function,Excel FLOOR,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.494</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel FLOOR]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[math]]></S></L>"
F.MATH.FLOOR_SLK,CMP,2.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function floor_slk( n,sg ) label= ""Excel FLOOR"";"
F.MATH.FLOOR_SLK,CMP,3.0,Statement Source,Comment,CMT,0.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     floor_slk
  *
  * PURPOSE:   Microsoft Excel's FLOOR function.  Rounds the number
  *            downm toward zero, to the nearest multiple of
  *            significance.
  *
  * USAGE:     floor = floor_slk( n, sg );
  *
  * EXAMPLES:  floor_slk( 2.5, 1 ); returns 2
  *            floor_slk( -2.5, -2 ); returns -2
  *            floor_slk( -2.5, 2 ); returns .
  *            floor_slk( 1.5, .1 ); returns 1.5
  *
  *--------------------------------------------------------------------*/"
F.MATH.FLOOR_SLK,CMP,4.0,Statement Source,Executable,IF,0.0,2.0,,if n lt 0 and sg gt 0 then
F.MATH.FLOOR_SLK,CMP,5.0,Statement Source,Executable,RETURN,0.0,1.0,,return( . );
F.MATH.FLOOR_SLK,CMP,6.0,Statement Source,Executable,IF,0.0,2.0,,if n gt 0 and sg lt 0 then
F.MATH.FLOOR_SLK,CMP,7.0,Statement Source,Executable,RETURN,0.0,1.0,,return( . );
F.MATH.FLOOR_SLK,CMP,8.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"fl = n - mod(n,sg);"
F.MATH.FLOOR_SLK,CMP,9.0,Statement Source,Executable,RETURN,0.0,1.0,,return( fl );
F.MATH.FLOOR_SLK,CMP,10.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.MATH.MULTINOMIAL_SLK,CMP,11.0,Prototype,FCmp,math,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[multinomial_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">144</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel MULTINOMIAL]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[nums]]></S><S n=""Kind""><![CDATA[m]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[a]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">224</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N><L n=""ArraySpec""><S n=""Type""><![CDATA[n]]></S><N n=""Length"">0</N><N n=""NDim"">1</N><N n=""DimProd"">1</N><N n=""Dim1"">0</N><N n=""Dim2"">0</N></L></L></L></L>"
F.MATH.MULTINOMIAL_SLK,CMP,12.0,Header,Function,Excel MULTINOMIAL,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.494</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel MULTINOMIAL]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[math]]></S></L>"
F.MATH.MULTINOMIAL_SLK,CMP,13.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function multinomial_slk( nums[*] ) varargs label= ""Excel MULTINOMIAL"";"
F.MATH.MULTINOMIAL_SLK,CMP,14.0,Statement Source,Comment,CMT,0.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     multinomial_slk
  *
  * PURPOSE:   Microsoft Excel's MULTINOMIAL function.  Returns the
  *            ratio fo the factorial of a sum fo values to the
  *            product of factorials.
  *
  * USAGE:     m = multinomial_slk( n1, n2, n3, ... );
  *
  * EXAMPLES:  multinomial_slk(2,3,4 ); returns 1260
  *
  *--------------------------------------------------------------------*/"
F.MATH.MULTINOMIAL_SLK,CMP,15.0,Statement Source,Executable,ASSIGN,0.0,1.0,,len = dim(nums);
F.MATH.MULTINOMIAL_SLK,CMP,16.0,Statement Source,Executable,IF,0.0,2.0,,if len eq 0 then
F.MATH.MULTINOMIAL_SLK,CMP,17.0,Statement Source,Executable,RETURN,0.0,1.0,,return( . );
F.MATH.MULTINOMIAL_SLK,CMP,18.0,Statement Source,Executable,ASSIGN,0.0,1.0,,i=1;
F.MATH.MULTINOMIAL_SLK,CMP,19.0,Statement Source,Executable,IF,0.0,2.0,,if nums[i] le 0 then
F.MATH.MULTINOMIAL_SLK,CMP,20.0,Statement Source,Executable,RETURN,0.0,1.0,,return( . );
F.MATH.MULTINOMIAL_SLK,CMP,21.0,Statement Source,Executable,ASSIGN,0.0,1.0,,sum = int(nums[i]);
F.MATH.MULTINOMIAL_SLK,CMP,22.0,Statement Source,Executable,ASSIGN,0.0,1.0,,prod = fact(sum);
F.MATH.MULTINOMIAL_SLK,CMP,23.0,Statement Source,Executable,DO,0.0,3.0,,do i = 2 to len;
F.MATH.MULTINOMIAL_SLK,CMP,24.0,Statement Source,Executable,IF,0.0,2.0,,if nums[i] le 0 then
F.MATH.MULTINOMIAL_SLK,CMP,25.0,Statement Source,Executable,RETURN,0.0,1.0,,return( . );
F.MATH.MULTINOMIAL_SLK,CMP,26.0,Statement Source,Executable,ASSIGN,0.0,1.0,,sum = sum + int(nums[i]);
F.MATH.MULTINOMIAL_SLK,CMP,27.0,Statement Source,Executable,ASSIGN,0.0,1.0,,prod = prod * fact(int(nums[i]));
F.MATH.MULTINOMIAL_SLK,CMP,28.0,Statement Source,Executable,END,0.0,10.0,,end;
F.MATH.MULTINOMIAL_SLK,CMP,29.0,Statement Source,Executable,RETURN,0.0,1.0,,return(fact(sum)/prod);
F.MATH.MULTINOMIAL_SLK,CMP,30.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.MATH.PRODUCT_SLK,CMP,31.0,Prototype,FCmp,math,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[product_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">144</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel PRODUCT]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[nums]]></S><S n=""Kind""><![CDATA[m]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[a]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">224</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N><L n=""ArraySpec""><S n=""Type""><![CDATA[n]]></S><N n=""Length"">0</N><N n=""NDim"">1</N><N n=""DimProd"">1</N><N n=""Dim1"">0</N><N n=""Dim2"">0</N></L></L></L></L>"
F.MATH.PRODUCT_SLK,CMP,32.0,Header,Function,Excel PRODUCT,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.495</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel PRODUCT]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[math]]></S></L>"
F.MATH.PRODUCT_SLK,CMP,33.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function product_slk( nums[*] ) varargs label= ""Excel PRODUCT"";"
F.MATH.PRODUCT_SLK,CMP,34.0,Statement Source,Comment,CMT,0.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     product_slk
  *
  * PURPOSE:   Microsoft Excel's PRODUCT function.  Returns the
  *            product of a list of values.
  *
  * USAGE:     p = product_slk( n1, n2, n3, ... );
  *
  * EXAMPLES:  product_slk(2,3,4); returns 24
  *
  *--------------------------------------------------------------------*/"
F.MATH.PRODUCT_SLK,CMP,35.0,Statement Source,Executable,ASSIGN,0.0,1.0,,len = dim(nums);
F.MATH.PRODUCT_SLK,CMP,36.0,Statement Source,Executable,IF,0.0,2.0,,if len eq 0 then
F.MATH.PRODUCT_SLK,CMP,37.0,Statement Source,Executable,RETURN,0.0,1.0,,return( . );
F.MATH.PRODUCT_SLK,CMP,38.0,Statement Source,Executable,ASSIGN,0.0,1.0,,prod = 1;
F.MATH.PRODUCT_SLK,CMP,39.0,Statement Source,Executable,DO,0.0,3.0,,do i = 1 to len;
F.MATH.PRODUCT_SLK,CMP,40.0,Statement Source,Executable,ASSIGN,0.0,1.0,,prod = prod * nums[i];
F.MATH.PRODUCT_SLK,CMP,41.0,Statement Source,Executable,END,0.0,10.0,,end;
F.MATH.PRODUCT_SLK,CMP,42.0,Statement Source,Executable,RETURN,0.0,1.0,,return(prod);
F.MATH.PRODUCT_SLK,CMP,43.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.MATH.FACTDOUBLE_SLK,CMP,44.0,Prototype,FCmp,math,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[factdouble_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel FACTDOUBLE]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[x]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">64</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.MATH.FACTDOUBLE_SLK,CMP,45.0,Header,Function,Excel FACTDOUBLE,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.496</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:22]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel FACTDOUBLE]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[math]]></S></L>"
F.MATH.FACTDOUBLE_SLK,CMP,46.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function factdouble_slk( x ) label= ""Excel FACTDOUBLE"";"
F.MATH.FACTDOUBLE_SLK,CMP,47.0,Statement Source,Comment,CMT,0.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     factdouble_slk
  *
  * PURPOSE:   Microsoft Excel's FACTDOUBLE function.  Returns the
  *            double factorial of an integer.
  *
  * USAGE:     fd = factdouble_slk( n );
  *
  * EXAMPLES:  factdouble_slk( 6 ); returns 6*4*2 = 48
  *            factdouble_slk( 7 ); returns 7*5*3*1 = 135
  *            factdouble_slk( 5.567); returns 5*3*1 = 15
  *
  *--------------------------------------------------------------------*/"
F.MATH.FACTDOUBLE_SLK,CMP,48.0,Statement Source,Executable,IF,0.0,2.0,,if x le 0 then
F.MATH.FACTDOUBLE_SLK,CMP,49.0,Statement Source,Executable,RETURN,0.0,1.0,,return( . );
F.MATH.FACTDOUBLE_SLK,CMP,50.0,Statement Source,Executable,ASSIGN,0.0,1.0,,fd = int(x);
F.MATH.FACTDOUBLE_SLK,CMP,51.0,Statement Source,Executable,DO,0.0,3.0,,do i = fd-2 to 1 by -2;
F.MATH.FACTDOUBLE_SLK,CMP,52.0,Statement Source,Executable,ASSIGN,0.0,1.0,,fd = fd * i;
F.MATH.FACTDOUBLE_SLK,CMP,53.0,Statement Source,Executable,END,0.0,10.0,,end;
F.MATH.FACTDOUBLE_SLK,CMP,54.0,Statement Source,Executable,RETURN,0.0,1.0,,return(fd);
F.MATH.FACTDOUBLE_SLK,CMP,55.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.MATH.ODD_SLK,CMP,56.0,Prototype,FCmp,math,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[odd_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel ODD]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[x]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.MATH.ODD_SLK,CMP,57.0,Header,Function,Excel ODD,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                    1726676902.5</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:23]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel ODD]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[math]]></S></L>"
F.MATH.ODD_SLK,CMP,58.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function odd_slk( x ) label= ""Excel ODD"";"
F.MATH.ODD_SLK,CMP,59.0,Statement Source,Comment,CMT,0.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     odd_slk
  *
  * PURPOSE:   Microsoft Excel's ODD function.  Returns the number
  *            rounded up to the nearest odd integer.
  *
  * USAGE:     odd = odd_slk( n );
  *
  * EXAMPLES:  odd_slk( 4 ); returns 5
  *            odd_slk( 4.1 ); returns 5
  *            odd_slk( -5.567); returns -7
  *
  *--------------------------------------------------------------------*/"
F.MATH.ODD_SLK,CMP,60.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"e = int(x) + sign(mod(x,int(x)));"
F.MATH.ODD_SLK,CMP,61.0,Statement Source,Executable,IF,0.0,2.0,,"if ( mod(e,2) eq 0 ) then"
F.MATH.ODD_SLK,CMP,62.0,Statement Source,Executable,ASSIGN,0.0,1.0,,e += sign(x);
F.MATH.ODD_SLK,CMP,63.0,Statement Source,Executable,RETURN,0.0,1.0,,return( e );
F.MATH.ODD_SLK,CMP,64.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
F.MATH.EVEN_SLK,CMP,65.0,Prototype,FCmp,math,0.0,,,"<L n=""Prototype""><S n=""Name""><![CDATA[even_slk]]></S><S n=""Group""><![CDATA[]]></S><N n=""MaxLag"">0</N><N n=""Flag0"">0</N><N n=""Flag1"">128</N><S n=""ReturnType""><![CDATA[n]]></S><N n=""ReturnSize"">8</N><S n=""Label""><![CDATA[Excel EVEN]]></S><L n=""ArgList""><L n=""Arg""><S n=""Name""><![CDATA[x]]></S><S n=""Kind""><![CDATA[v]]></S><S n=""Type""><![CDATA[n]]></S><S n=""Class""><![CDATA[n]]></S><N n=""Status"">0</N><N n=""Status2"">0</N><N n=""NInit"">0</N><N n=""MaxLag"">0</N><N n=""Size"">8</N><N n=""Flag1"">192</N><N n=""Flag2"">0</N><N n=""Flag3"">0</N><N n=""Flag4"">0</N><N n=""Flag5"">64</N><N n=""Flag6"">32</N></L></L></L>"
F.MATH.EVEN_SLK,CMP,66.0,Header,Function,Excel EVEN,0.0,,,"<L n=""Header""><S n=""Version""><![CDATA[1.1]]></S><N n=""Datetime"">                  1726676902.501</N><S n=""DatetimeStr""><![CDATA[18SEP14:16:28:23]]></S><S n=""SubType""><![CDATA[Function]]></S><S n=""Label""><![CDATA[Excel EVEN]]></S><N n=""Obfuscate"">0</N><S n=""Package""><![CDATA[math]]></S></L>"
F.MATH.EVEN_SLK,CMP,67.0,Statement Source,Executable,FUNCTION,0.0,65.0,,"function even_slk( x ) label= ""Excel EVEN"";"
F.MATH.EVEN_SLK,CMP,68.0,Statement Source,Comment,CMT,0.0,101.0,,"/*---------------------------------------------------------------------
  * ENTRY:     even_slk
  *
  * PURPOSE:   Microsoft Excel's EVEN function.  Returns the number
  *            rounded up to the nearest even integer.
  *
  * USAGE:     even = even_slk( n );
  *
  * EXAMPLES:  even_slk( 4 ); returns 4
  *            even_slk( 4.1 ); returns 6
  *            even_slk( -4.567); returns -6
  *
  *--------------------------------------------------------------------*/"
F.MATH.EVEN_SLK,CMP,69.0,Statement Source,Executable,ASSIGN,0.0,1.0,,"e = int(x) + sign(mod(x,int(x)));"
F.MATH.EVEN_SLK,CMP,70.0,Statement Source,Executable,IF,0.0,2.0,,"if ( mod(e,2) ne 0 ) then"
F.MATH.EVEN_SLK,CMP,71.0,Statement Source,Executable,ASSIGN,0.0,1.0,,e += sign(x);
F.MATH.EVEN_SLK,CMP,72.0,Statement Source,Executable,RETURN,0.0,1.0,,return( e );
F.MATH.EVEN_SLK,CMP,73.0,Statement Source,Executable,ENDSUB,0.0,14.0,,endsub;
